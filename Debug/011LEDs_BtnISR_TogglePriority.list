
011LEDs_BtnISR_TogglePriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006748  08006748  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006750  08006750  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014420  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001443c  2001443c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b63  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e2d  00000000  00000000  00036baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237b2  00000000  00000000  0003bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013600  00000000  00000000  0005f29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6edd  00000000  00000000  0007289a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149777  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004774  00000000  00000000  001497cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065a8 	.word	0x080065a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080065a8 	.word	0x080065a8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014394 	.word	0x20014394

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fbe5 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f85b 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8c3 	bl	80006f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(250000);
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <main+0xa0>)
 8000570:	f003 fd5e 	bl	8004030 <SEGGER_UART_init>

  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <main+0xa4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <main+0xa4>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000580:	f003 fb18 	bl	8003bb4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000584:	f005 f9b8 	bl	80058f8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0xa8>)
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2303      	movs	r3, #3
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	22c8      	movs	r2, #200	; 0xc8
 8000594:	491c      	ldr	r1, [pc, #112]	; (8000608 <main+0xac>)
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <main+0xb0>)
 8000598:	f001 fefa 	bl	8002390 <xTaskCreate>
 800059c:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00a      	beq.n	80005ba <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a8:	f383 8811 	msr	BASEPRI, r3
 80005ac:	f3bf 8f6f 	isb	sy
 80005b0:	f3bf 8f4f 	dsb	sy
 80005b4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b6:	bf00      	nop
 80005b8:	e7fe      	b.n	80005b8 <main+0x5c>
  next_task_handle=ledg_task_handle;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0xa8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <main+0xb4>)
 80005c0:	6013      	str	r3, [r2, #0]

  //status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
  //configASSERT(status == pdPASS);

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <main+0xb8>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	4912      	ldr	r1, [pc, #72]	; (8000618 <main+0xbc>)
 80005d0:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0xc0>)
 80005d2:	f001 fedd 	bl	8002390 <xTaskCreate>
 80005d6:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x98>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	607b      	str	r3, [r7, #4]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x96>

  //status = xTaskCreate(button_handler, "Button task", 200, NULL, 4, &btn_task_handle);
  //configASSERT(status == pdPASS);

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80005f4:	f002 f8f0 	bl	80027d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x9c>
 80005fa:	bf00      	nop
 80005fc:	0003d090 	.word	0x0003d090
 8000600:	e0001000 	.word	0xe0001000
 8000604:	20014340 	.word	0x20014340
 8000608:	080065c0 	.word	0x080065c0
 800060c:	08000a19 	.word	0x08000a19
 8000610:	20000038 	.word	0x20000038
 8000614:	20014344 	.word	0x20014344
 8000618:	080065d0 	.word	0x080065d0
 800061c:	08000aa5 	.word	0x08000aa5

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 ffb2 	bl	8006598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000694:	2332      	movs	r3, #50	; 0x32
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000698:	2304      	movs	r3, #4
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe7f 	bl	80013a8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 fa50 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8e0 	bl	8001898 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 fa39 	bl	8000b54 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4ba6      	ldr	r3, [pc, #664]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4aa5      	ldr	r2, [pc, #660]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4ba3      	ldr	r3, [pc, #652]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b9f      	ldr	r3, [pc, #636]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a9e      	ldr	r2, [pc, #632]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b9c      	ldr	r3, [pc, #624]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b98      	ldr	r3, [pc, #608]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a97      	ldr	r2, [pc, #604]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b95      	ldr	r3, [pc, #596]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b91      	ldr	r3, [pc, #580]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a90      	ldr	r2, [pc, #576]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b8e      	ldr	r3, [pc, #568]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b8a      	ldr	r3, [pc, #552]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a89      	ldr	r2, [pc, #548]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b87      	ldr	r3, [pc, #540]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b83      	ldr	r3, [pc, #524]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a82      	ldr	r2, [pc, #520]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b80      	ldr	r3, [pc, #512]	; (80009a8 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	487d      	ldr	r0, [pc, #500]	; (80009ac <MX_GPIO_Init+0x2b8>)
 80007b8:	f000 fd9e 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	487b      	ldr	r0, [pc, #492]	; (80009b0 <MX_GPIO_Init+0x2bc>)
 80007c2:	f000 fd99 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007cc:	4879      	ldr	r0, [pc, #484]	; (80009b4 <MX_GPIO_Init+0x2c0>)
 80007ce:	f000 fd93 	bl	80012f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007d2:	2308      	movs	r3, #8
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4870      	ldr	r0, [pc, #448]	; (80009ac <MX_GPIO_Init+0x2b8>)
 80007ea:	f000 fbe9 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	486a      	ldr	r0, [pc, #424]	; (80009b0 <MX_GPIO_Init+0x2bc>)
 8000806:	f000 fbdb 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800081a:	2305      	movs	r3, #5
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4862      	ldr	r0, [pc, #392]	; (80009b0 <MX_GPIO_Init+0x2bc>)
 8000826:	f000 fbcb 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	485e      	ldr	r0, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x2c4>)
 8000840:	f000 fbbe 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000844:	2310      	movs	r3, #16
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000854:	2306      	movs	r3, #6
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4856      	ldr	r0, [pc, #344]	; (80009b8 <MX_GPIO_Init+0x2c4>)
 8000860:	f000 fbae 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000864:	23e0      	movs	r3, #224	; 0xe0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000874:	2305      	movs	r3, #5
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	484e      	ldr	r0, [pc, #312]	; (80009b8 <MX_GPIO_Init+0x2c4>)
 8000880:	f000 fb9e 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000884:	2304      	movs	r3, #4
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4849      	ldr	r0, [pc, #292]	; (80009bc <MX_GPIO_Init+0x2c8>)
 8000898:	f000 fb92 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4840      	ldr	r0, [pc, #256]	; (80009bc <MX_GPIO_Init+0x2c8>)
 80008ba:	f000 fb81 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008be:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4837      	ldr	r0, [pc, #220]	; (80009b4 <MX_GPIO_Init+0x2c0>)
 80008d8:	f000 fb72 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ee:	2306      	movs	r3, #6
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x2bc>)
 80008fa:	f000 fb61 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4829      	ldr	r0, [pc, #164]	; (80009b8 <MX_GPIO_Init+0x2c4>)
 8000914:	f000 fb54 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000918:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092a:	230a      	movs	r3, #10
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4820      	ldr	r0, [pc, #128]	; (80009b8 <MX_GPIO_Init+0x2c4>)
 8000936:	f000 fb43 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <MX_GPIO_Init+0x2c0>)
 800094e:	f000 fb37 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000952:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000958:	2312      	movs	r3, #18
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000964:	2304      	movs	r3, #4
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <MX_GPIO_Init+0x2c8>)
 8000970:	f000 fb26 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000974:	2302      	movs	r3, #2
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000978:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_GPIO_Init+0x2b8>)
 800098a:	f000 fb19 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2106      	movs	r1, #6
 8000992:	2006      	movs	r0, #6
 8000994:	f000 faea 	bl	8000f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000998:	2006      	movs	r0, #6
 800099a:	f000 fb03 	bl	8000fa4 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	; 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */


void button_interrupt_handler(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af02      	add	r7, sp, #8

	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]

	traceISR_ENTER();
 80009ca:	f005 fa5f 	bl	8005e8c <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <button_interrupt_handler+0x50>)
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	2300      	movs	r3, #0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 fa76 	bl	8002ed0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00a      	beq.n	8000a00 <button_interrupt_handler+0x40>
 80009ea:	f005 faad 	bl	8005f48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <button_interrupt_handler+0x54>)
 80009f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	e001      	b.n	8000a04 <button_interrupt_handler+0x44>
 8000a00:	f005 fa86 	bl	8005f10 <SEGGER_SYSVIEW_RecordExitISR>
	traceISR_EXIT();
 8000a04:	f005 fa84 	bl	8005f10 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000038 	.word	0x20000038
 8000a14:	e000ed04 	.word	0xe000ed04

08000a18 <led_green_handler>:


static void led_green_handler(void * parameters){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <led_green_handler+0x74>)
 8000a22:	f005 fcdb 	bl	80063dc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <led_green_handler+0x78>)
 8000a2c:	f000 fc7d 	bl	800132a <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,0);
 8000a30:	2300      	movs	r3, #0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2300      	movs	r3, #0
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f002 f9c0 	bl	8002dc0 <xTaskGenericNotifyWait>
 8000a40:	60f8      	str	r0, [r7, #12]
		HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f000 f9b6 	bl	8000db4 <HAL_Delay>
		if(status == pdTRUE){
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d1e8      	bne.n	8000a20 <led_green_handler+0x8>
			portENTER_CRITICAL();
 8000a4e:	f002 fd79 	bl	8003544 <vPortEnterCritical>
			next_task_handle=ledr_task_handle;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <led_green_handler+0x7c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <led_green_handler+0x80>)
 8000a58:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <led_green_handler+0x78>)
 8000a62:	f000 fc49 	bl	80012f8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Block green LED task");
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <led_green_handler+0x84>)
 8000a68:	f005 fcb8 	bl	80063dc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskPrioritySet(ledg_task_handle,1);
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <led_green_handler+0x88>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fdf0 	bl	8002658 <vTaskPrioritySet>
			vTaskPrioritySet(ledr_task_handle,3);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <led_green_handler+0x7c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fdea 	bl	8002658 <vTaskPrioritySet>
			portEXIT_CRITICAL();
 8000a84:	f002 fd8e 	bl	80035a4 <vPortExitCritical>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a88:	e7ca      	b.n	8000a20 <led_green_handler+0x8>
 8000a8a:	bf00      	nop
 8000a8c:	080065e0 	.word	0x080065e0
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	20014344 	.word	0x20014344
 8000a98:	20000038 	.word	0x20000038
 8000a9c:	080065f4 	.word	0x080065f4
 8000aa0:	20014340 	.word	0x20014340

08000aa4 <led_red_handler>:
		}
	}
}


static void led_red_handler(void * parameters){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]

	BaseType_t status;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000aac:	481a      	ldr	r0, [pc, #104]	; (8000b18 <led_red_handler+0x74>)
 8000aae:	f005 fc95 	bl	80063dc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <led_red_handler+0x78>)
 8000ab8:	f000 fc37 	bl	800132a <HAL_GPIO_TogglePin>
		status=xTaskNotifyWait(0,0,NULL,0);
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f002 f97a 	bl	8002dc0 <xTaskGenericNotifyWait>
 8000acc:	60f8      	str	r0, [r7, #12]
		HAL_Delay(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f000 f970 	bl	8000db4 <HAL_Delay>
		if(status == pdTRUE){
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d1e8      	bne.n	8000aac <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000ada:	f002 fd33 	bl	8003544 <vPortEnterCritical>
			next_task_handle=ledg_task_handle;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <led_red_handler+0x7c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <led_red_handler+0x80>)
 8000ae4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <led_red_handler+0x78>)
 8000aee:	f000 fc03 	bl	80012f8 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Block red LED task");
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <led_red_handler+0x84>)
 8000af4:	f005 fc72 	bl	80063dc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskPrioritySet(ledg_task_handle,3);
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <led_red_handler+0x7c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2103      	movs	r1, #3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fdaa 	bl	8002658 <vTaskPrioritySet>
			vTaskPrioritySet(ledr_task_handle,1);
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <led_red_handler+0x88>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fda4 	bl	8002658 <vTaskPrioritySet>
			portEXIT_CRITICAL();
 8000b10:	f002 fd48 	bl	80035a4 <vPortExitCritical>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b14:	e7ca      	b.n	8000aac <led_red_handler+0x8>
 8000b16:	bf00      	nop
 8000b18:	0800660c 	.word	0x0800660c
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	20014340 	.word	0x20014340
 8000b24:	20000038 	.word	0x20000038
 8000b28:	08006620 	.word	0x08006620
 8000b2c:	20014344 	.word	0x20014344

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 f917 	bl	8000d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b9e:	f002 fc53 	bl	8003448 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2036      	movs	r0, #54	; 0x36
 8000bc6:	f000 f9d1 	bl	8000f6c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bca:	2036      	movs	r0, #54	; 0x36
 8000bcc:	f000 f9ea 	bl	8000fa4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_InitTick+0xa4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <HAL_InitTick+0xa4>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_InitTick+0xa4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bec:	f107 0210 	add.w	r2, r7, #16
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f836 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bfc:	f001 f820 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8000c00:	4603      	mov	r3, r0
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_InitTick+0xa8>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_InitTick+0xac>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HAL_InitTick+0xb0>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_InitTick+0xac>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <HAL_InitTick+0xac>)
 8000c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_InitTick+0xac>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_InitTick+0xac>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_InitTick+0xac>)
 8000c36:	f001 f849 	bl	8001ccc <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_InitTick+0xac>)
 8000c42:	f001 f89d 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	431bde83 	.word	0x431bde83
 8000c5c:	20014348 	.word	0x20014348
 8000c60:	40001000 	.word	0x40001000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000c94:	f7ff fe94 	bl	80009c0 <button_interrupt_handler>
	// clear EXTI 0 pending bit in the exti pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fb61 	bl	8001360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM6_DAC_IRQHandler+0x10>)
 8000caa:	f001 f8d9 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20014348 	.word	0x20014348

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f005 fc05 	bl	8006518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fc25 	bl	800055c <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d20:	08006758 	.word	0x08006758
  ldr r2, =_sbss
 8000d24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d28:	2001443c 	.word	0x2001443c

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f8fc 	bl	8000f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff26 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fefc 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20014390 	.word	0x20014390

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20014390 	.word	0x20014390

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff4c 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7e:	f7ff ff61 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff ffb1 	bl	8000ef0 <NVIC_EncodePriority>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff80 	bl	8000e9c <__NVIC_SetPriority>
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff54 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e16b      	b.n	80012b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 815a 	bne.w	80012ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80b4 	beq.w	80012ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a5f      	ldr	r2, [pc, #380]	; (80012cc <HAL_GPIO_Init+0x30c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b5d      	ldr	r3, [pc, #372]	; (80012cc <HAL_GPIO_Init+0x30c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <HAL_GPIO_Init+0x310>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_GPIO_Init+0x314>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x318>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d025      	beq.n	80011e2 <HAL_GPIO_Init+0x222>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x31c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01f      	beq.n	80011de <HAL_GPIO_Init+0x21e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x320>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_GPIO_Init+0x324>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x328>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_GPIO_Init+0x330>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x20a>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00e      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x228>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x310>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800122a:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae90 	bls.w	8000fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40021c00 	.word	0x40021c00
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133c:	887a      	ldrh	r2, [r7, #2]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	041a      	lsls	r2, r3, #16
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43d9      	mvns	r1, r3
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	400b      	ands	r3, r1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	4013      	ands	r3, r2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f806 	bl	8001390 <HAL_GPIO_EXTI_Callback>
  }
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e264      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c6:	4ba3      	ldr	r3, [pc, #652]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00c      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4ba0      	ldr	r3, [pc, #640]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d112      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b9d      	ldr	r3, [pc, #628]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b99      	ldr	r3, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e23f      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b91      	ldr	r3, [pc, #580]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a90      	ldr	r2, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b8b      	ldr	r3, [pc, #556]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a8a      	ldr	r2, [pc, #552]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b88      	ldr	r3, [pc, #544]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a87      	ldr	r2, [pc, #540]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b84      	ldr	r3, [pc, #528]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a83      	ldr	r2, [pc, #524]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a80      	ldr	r2, [pc, #512]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fc9c 	bl	8000d9c <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc98 	bl	8000d9c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e204      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b76      	ldr	r3, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc88 	bl	8000d9c <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc84 	bl	8000d9c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1f0      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b6c      	ldr	r3, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b62      	ldr	r3, [pc, #392]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b5f      	ldr	r3, [pc, #380]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c4      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4952      	ldr	r1, [pc, #328]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b4f      	ldr	r3, [pc, #316]	; (8001658 <HAL_RCC_OscConfig+0x2b0>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fc3d 	bl	8000d9c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fc39 	bl	8000d9c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a5      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4940      	ldr	r1, [pc, #256]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_OscConfig+0x2b0>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fc1c 	bl	8000d9c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fc18 	bl	8000d9c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e184      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d030      	beq.n	80015f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d016      	beq.n	80015c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x2b4>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fbfc 	bl	8000d9c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fbf8 	bl	8000d9c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e164      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
 80015c6:	e015      	b.n	80015f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RCC_OscConfig+0x2b4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbe5 	bl	8000d9c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fbe1 	bl	8000d9c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e14d      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a0 	beq.w	8001742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x2b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d121      	bne.n	8001682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x2b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_RCC_OscConfig+0x2b8>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fba7 	bl	8000d9c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e011      	b.n	8001676 <HAL_RCC_OscConfig+0x2ce>
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	42470000 	.word	0x42470000
 800165c:	42470e80 	.word	0x42470e80
 8001660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001664:	f7ff fb9a 	bl	8000d9c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e106      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0x4e4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x2f0>
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a80      	ldr	r2, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	e01c      	b.n	80016d2 <HAL_RCC_OscConfig+0x32a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x312>
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	4a7a      	ldr	r2, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6713      	str	r3, [r2, #112]	; 0x70
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a77      	ldr	r2, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x32a>
 80016ba:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016be:	4a74      	ldr	r2, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6713      	str	r3, [r2, #112]	; 0x70
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a71      	ldr	r2, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fb5f 	bl	8000d9c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fb5b 	bl	8000d9c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0c5      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b65      	ldr	r3, [pc, #404]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCC_OscConfig+0x33a>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fb49 	bl	8000d9c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff fb45 	bl	8000d9c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0af      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4b56      	ldr	r3, [pc, #344]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a55      	ldr	r2, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 800173c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809b 	beq.w	8001882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d05c      	beq.n	8001812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d141      	bne.n	80017e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb19 	bl	8000d9c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb15 	bl	8000d9c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e081      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69da      	ldr	r2, [r3, #28]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	4937      	ldr	r1, [pc, #220]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b6:	4b37      	ldr	r3, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff faee 	bl	8000d9c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff faea 	bl	8000d9c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e056      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x41c>
 80017e2:	e04e      	b.n	8001882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fad7 	bl	8000d9c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fad3 	bl	8000d9c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e03f      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x44a>
 8001810:	e037      	b.n	8001882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e032      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_RCC_OscConfig+0x4e8>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d028      	beq.n	800187e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d121      	bne.n	800187e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d11a      	bne.n	800187e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001856:	4293      	cmp	r3, r2
 8001858:	d111      	bne.n	800187e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d107      	bne.n	800187e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40007000 	.word	0x40007000
 8001890:	40023800 	.word	0x40023800
 8001894:	42470060 	.word	0x42470060

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cc      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90c      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d044      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e067      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff fa08 	bl	8000d9c <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff fa04 	bl	8000d9c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e04f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8b6 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08006708 	.word	0x08006708
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d00d      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	f200 80bd 	bhi.w	8001c08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x34>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a96:	e0b7      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a9a:	60bb      	str	r3, [r7, #8]
       break;
 8001a9c:	e0b7      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001aa0:	60bb      	str	r3, [r7, #8]
      break;
 8001aa2:	e0b4      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa4:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aae:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d04d      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aca:	f04f 0100 	mov.w	r1, #0
 8001ace:	ea02 0800 	and.w	r8, r2, r0
 8001ad2:	ea03 0901 	and.w	r9, r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	014b      	lsls	r3, r1, #5
 8001ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ae8:	0142      	lsls	r2, r0, #5
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	ebb0 0008 	subs.w	r0, r0, r8
 8001af2:	eb61 0109 	sbc.w	r1, r1, r9
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b04:	0182      	lsls	r2, r0, #6
 8001b06:	1a12      	subs	r2, r2, r0
 8001b08:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0c:	f04f 0000 	mov.w	r0, #0
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	00d9      	lsls	r1, r3, #3
 8001b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b1a:	00d0      	lsls	r0, r2, #3
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	eb12 0208 	adds.w	r2, r2, r8
 8001b24:	eb43 0309 	adc.w	r3, r3, r9
 8001b28:	f04f 0000 	mov.w	r0, #0
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	0259      	lsls	r1, r3, #9
 8001b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b36:	0250      	lsls	r0, r2, #9
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f7fe fb8c 	bl	8000264 <__aeabi_uldivmod>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4613      	mov	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e04a      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	ea02 0400 	and.w	r4, r2, r0
 8001b6e:	ea03 0501 	and.w	r5, r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	014b      	lsls	r3, r1, #5
 8001b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b84:	0142      	lsls	r2, r0, #5
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	1b00      	subs	r0, r0, r4
 8001b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	018b      	lsls	r3, r1, #6
 8001b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b9e:	0182      	lsls	r2, r0, #6
 8001ba0:	1a12      	subs	r2, r2, r0
 8001ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	00d9      	lsls	r1, r3, #3
 8001bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb4:	00d0      	lsls	r0, r2, #3
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	1912      	adds	r2, r2, r4
 8001bbc:	eb45 0303 	adc.w	r3, r5, r3
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0299      	lsls	r1, r3, #10
 8001bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bce:	0290      	lsls	r0, r2, #10
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	f7fe fb40 	bl	8000264 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	60bb      	str	r3, [r7, #8]
      break;
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c0a:	60bb      	str	r3, [r7, #8]
      break;
 8001c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000000 	.word	0x20000000

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a9b      	lsrs	r3, r3, #10
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08006718 	.word	0x08006718

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f839 	bl	8001d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9d8 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0202 	mvn.w	r2, #2
 8001e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8ee 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8e0 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f8f1 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8c4 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8b6 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8c7 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f89a 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f88c 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f89d 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f870 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f862 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f873 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fda6 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f902 	bl	8002214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f838 	bl	80020ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8cc 	bl	8002200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d00f      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <TIM_Base_SetConfig+0x118>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <TIM_Base_SetConfig+0x11c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <TIM_Base_SetConfig+0x120>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d027      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <TIM_Base_SetConfig+0x118>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d023      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <TIM_Base_SetConfig+0x11c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <TIM_Base_SetConfig+0x120>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d017      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <TIM_Base_SetConfig+0x128>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <TIM_Base_SetConfig+0x12c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <TIM_Base_SetConfig+0x130>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <TIM_Base_SetConfig+0x134>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <TIM_Base_SetConfig+0x138>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a23      	ldr	r2, [pc, #140]	; (80021fc <TIM_Base_SetConfig+0x13c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d108      	bne.n	8002184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <TIM_Base_SetConfig+0x114>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0xf8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d103      	bne.n	80021c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40000c00 	.word	0x40000c00
 80021e4:	40010400 	.word	0x40010400
 80021e8:	40014000 	.word	0x40014000
 80021ec:	40014400 	.word	0x40014400
 80021f0:	40014800 	.word	0x40014800
 80021f4:	40001800 	.word	0x40001800
 80021f8:	40001c00 	.word	0x40001c00
 80021fc:	40002000 	.word	0x40002000

08002200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f103 0208 	add.w	r2, r3, #8
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 0208 	add.w	r2, r3, #8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0208 	add.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d103      	bne.n	80022ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e00c      	b.n	8002304 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3308      	adds	r3, #8
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e002      	b.n	80022f8 <vListInsert+0x2e>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d2f6      	bcs.n	80022f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6892      	ldr	r2, [r2, #8]
 8002352:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6852      	ldr	r2, [r2, #4]
 800235c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d103      	bne.n	8002370 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af04      	add	r7, sp, #16
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f9f9 	bl	800379c <pvPortMalloc>
 80023aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00e      	beq.n	80023d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023b2:	2058      	movs	r0, #88	; 0x58
 80023b4:	f001 f9f2 	bl	800379c <pvPortMalloc>
 80023b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
 80023c6:	e005      	b.n	80023d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f001 fac7 	bl	800395c <vPortFree>
 80023ce:	e001      	b.n	80023d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d013      	beq.n	8002402 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	2300      	movs	r3, #0
 80023de:	9303      	str	r3, [sp, #12]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f80e 	bl	8002412 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023f6:	69f8      	ldr	r0, [r7, #28]
 80023f8:	f000 f8a2 	bl	8002540 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023fc:	2301      	movs	r3, #1
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e002      	b.n	8002408 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002408:	69bb      	ldr	r3, [r7, #24]
    }
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b088      	sub	sp, #32
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	461a      	mov	r2, r3
 800242a:	21a5      	movs	r1, #165	; 0xa5
 800242c:	f004 f8b4 	bl	8006598 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800243a:	3b01      	subs	r3, #1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f023 0307 	bic.w	r3, r3, #7
 8002448:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	617b      	str	r3, [r7, #20]
    }
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01f      	beq.n	80024b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	e012      	b.n	800249c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	7819      	ldrb	r1, [r3, #0]
 800247e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	3334      	adds	r3, #52	; 0x34
 8002486:	460a      	mov	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d9e9      	bls.n	8002476 <prvInitialiseNewTask+0x64>
 80024a2:	e000      	b.n	80024a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80024a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024ae:	e003      	b.n	80024b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d901      	bls.n	80024c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024be:	2304      	movs	r3, #4
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	2200      	movs	r2, #0
 80024d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3304      	adds	r3, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fec5 	bl	8002268 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	3318      	adds	r3, #24
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fec0 	bl	8002268 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	f1c3 0205 	rsb	r2, r3, #5
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	3350      	adds	r3, #80	; 0x50
 8002502:	2204      	movs	r2, #4
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f846 	bl	8006598 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	3354      	adds	r3, #84	; 0x54
 8002510:	2201      	movs	r2, #1
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f004 f83f 	bl	8006598 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	69b8      	ldr	r0, [r7, #24]
 8002520:	f000 fe64 	bl	80031ec <pxPortInitialiseStack>
 8002524:	4602      	mov	r2, r0
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002534:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af02      	add	r7, sp, #8
 8002546:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002548:	f000 fffc 	bl	8003544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <prvAddNewTaskToReadyList+0xfc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <prvAddNewTaskToReadyList+0xfc>)
 8002554:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002556:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <prvAddNewTaskToReadyList+0x100>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800255e:	4a38      	ldr	r2, [pc, #224]	; (8002640 <prvAddNewTaskToReadyList+0x100>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <prvAddNewTaskToReadyList+0xfc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d110      	bne.n	800258e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800256c:	f000 fb8e 	bl	8002c8c <prvInitialiseTaskLists>
 8002570:	e00d      	b.n	800258e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <prvAddNewTaskToReadyList+0x104>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <prvAddNewTaskToReadyList+0x100>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	429a      	cmp	r2, r3
 8002586:	d802      	bhi.n	800258e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <prvAddNewTaskToReadyList+0x100>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <prvAddNewTaskToReadyList+0x108>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <prvAddNewTaskToReadyList+0x108>)
 8002596:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <prvAddNewTaskToReadyList+0x108>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d016      	beq.n	80025d4 <prvAddNewTaskToReadyList+0x94>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 fd05 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskCreate>
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	461d      	mov	r5, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461c      	mov	r4, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1ae3      	subs	r3, r4, r3
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	462b      	mov	r3, r5
 80025d0:	f001 fb8a 	bl	8003ce8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fd72 	bl	80060c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2201      	movs	r2, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <prvAddNewTaskToReadyList+0x10c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <prvAddNewTaskToReadyList+0x10c>)
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4a15      	ldr	r2, [pc, #84]	; (8002650 <prvAddNewTaskToReadyList+0x110>)
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f7ff fe3c 	bl	8002282 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800260a:	f000 ffcb 	bl	80035a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <prvAddNewTaskToReadyList+0x104>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00e      	beq.n	8002634 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <prvAddNewTaskToReadyList+0x100>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d207      	bcs.n	8002634 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <prvAddNewTaskToReadyList+0x114>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}
 800263c:	20000114 	.word	0x20000114
 8002640:	2000003c 	.word	0x2000003c
 8002644:	20000120 	.word	0x20000120
 8002648:	20000130 	.word	0x20000130
 800264c:	2000011c 	.word	0x2000011c
 8002650:	20000040 	.word	0x20000040
 8002654:	e000ed04 	.word	0xe000ed04

08002658 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af02      	add	r7, sp, #8
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d90a      	bls.n	8002682 <vTaskPrioritySet+0x2a>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	60fb      	str	r3, [r7, #12]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d901      	bls.n	800268c <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002688:	2304      	movs	r3, #4
 800268a:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800268c:	f000 ff5a 	bl	8003544 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <vTaskPrioritySet+0x44>
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <vTaskPrioritySet+0x170>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e000      	b.n	800269e <vTaskPrioritySet+0x46>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fdae 	bl	8006204 <SEGGER_SYSVIEW_ShrinkId>
 80026a8:	4603      	mov	r3, r0
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	2028      	movs	r0, #40	; 0x28
 80026b0:	f002 ff88 	bl	80055c4 <SEGGER_SYSVIEW_RecordU32x2>
 80026b4:	69b8      	ldr	r0, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	461a      	mov	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4613      	mov	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	f001 fb75 	bl	8003db8 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d06f      	beq.n	80027bc <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d90d      	bls.n	8002700 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 80026e4:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <vTaskPrioritySet+0x170>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d00f      	beq.n	800270e <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <vTaskPrioritySet+0x170>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d309      	bcc.n	800270e <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e006      	b.n	800270e <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <vTaskPrioritySet+0x170>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	429a      	cmp	r2, r3
 8002708:	d101      	bne.n	800270e <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	429a      	cmp	r2, r3
 800271e:	d102      	bne.n	8002726 <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db04      	blt.n	800273e <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f1c3 0205 	rsb	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6959      	ldr	r1, [r3, #20]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <vTaskPrioritySet+0x174>)
 800274e:	4413      	add	r3, r2
 8002750:	4299      	cmp	r1, r3
 8002752:	d128      	bne.n	80027a6 <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fdef 	bl	800233c <uxListRemove>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002764:	2201      	movs	r2, #1
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <vTaskPrioritySet+0x178>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4013      	ands	r3, r2
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <vTaskPrioritySet+0x178>)
 8002776:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <vTaskPrioritySet+0x178>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <vTaskPrioritySet+0x178>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <vTaskPrioritySet+0x174>)
 8002798:	441a      	add	r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7ff fd6e 	bl	8002282 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <vTaskPrioritySet+0x17c>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80027bc:	f000 fef2 	bl	80035a4 <vPortExitCritical>
    }
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000003c 	.word	0x2000003c
 80027cc:	20000040 	.word	0x20000040
 80027d0:	2000011c 	.word	0x2000011c
 80027d4:	e000ed04 	.word	0xe000ed04

080027d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <vTaskStartScheduler+0x98>)
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2300      	movs	r3, #0
 80027e8:	2282      	movs	r2, #130	; 0x82
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <vTaskStartScheduler+0x9c>)
 80027ec:	4822      	ldr	r0, [pc, #136]	; (8002878 <vTaskStartScheduler+0xa0>)
 80027ee:	f7ff fdcf 	bl	8002390 <xTaskCreate>
 80027f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d124      	bne.n	8002844 <vTaskStartScheduler+0x6c>
        __asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	60bb      	str	r3, [r7, #8]
    }
 800280c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <vTaskStartScheduler+0xa4>)
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <vTaskStartScheduler+0xa8>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <vTaskStartScheduler+0xac>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <vTaskStartScheduler+0xb0>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <vTaskStartScheduler+0x98>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d102      	bne.n	8002834 <vTaskStartScheduler+0x5c>
 800282e:	f003 fba7 	bl	8005f80 <SEGGER_SYSVIEW_OnIdle>
 8002832:	e004      	b.n	800283e <vTaskStartScheduler+0x66>
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <vTaskStartScheduler+0xb0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fbff 	bl	800603c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800283e:	f000 fd61 	bl	8003304 <xPortStartScheduler>
 8002842:	e00e      	b.n	8002862 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d10a      	bne.n	8002862 <vTaskStartScheduler+0x8a>
        __asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	607b      	str	r3, [r7, #4]
    }
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <vTaskStartScheduler+0xb4>)
 8002864:	681b      	ldr	r3, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000138 	.word	0x20000138
 8002874:	08006634 	.word	0x08006634
 8002878:	08002c5d 	.word	0x08002c5d
 800287c:	20000134 	.word	0x20000134
 8002880:	20000120 	.word	0x20000120
 8002884:	20000118 	.word	0x20000118
 8002888:	2000003c 	.word	0x2000003c
 800288c:	2000000c 	.word	0x2000000c

08002890 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <vTaskSuspendAll+0x18>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <vTaskSuspendAll+0x18>)
 800289c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	2000013c 	.word	0x2000013c

080028ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xTaskResumeAll+0x2c>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	603b      	str	r3, [r7, #0]
    }
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028d8:	f000 fe34 	bl	8003544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028e4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <xTaskResumeAll+0x11c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d165      	bne.n	80029ba <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <xTaskResumeAll+0x120>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d061      	beq.n	80029ba <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028f6:	e032      	b.n	800295e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <xTaskResumeAll+0x124>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3318      	adds	r3, #24
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fd19 	bl	800233c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fd14 	bl	800233c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fbd2 	bl	80060c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	2201      	movs	r2, #1
 8002922:	409a      	lsls	r2, r3
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <xTaskResumeAll+0x128>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <xTaskResumeAll+0x128>)
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <xTaskResumeAll+0x12c>)
 800293c:	441a      	add	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3304      	adds	r3, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7ff fc9c 	bl	8002282 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <xTaskResumeAll+0x130>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	429a      	cmp	r2, r3
 8002956:	d302      	bcc.n	800295e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <xTaskResumeAll+0x134>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <xTaskResumeAll+0x124>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1c8      	bne.n	80028f8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800296c:	f000 fa0c 	bl	8002d88 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <xTaskResumeAll+0x138>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800297c:	f000 f848 	bl	8002a10 <xTaskIncrementTick>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <xTaskResumeAll+0x134>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f1      	bne.n	800297c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <xTaskResumeAll+0x138>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <xTaskResumeAll+0x134>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <xTaskResumeAll+0x13c>)
 80029ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029ba:	f000 fdf3 	bl	80035a4 <vPortExitCritical>

    return xAlreadyYielded;
 80029be:	68bb      	ldr	r3, [r7, #8]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000013c 	.word	0x2000013c
 80029cc:	20000114 	.word	0x20000114
 80029d0:	200000d4 	.word	0x200000d4
 80029d4:	2000011c 	.word	0x2000011c
 80029d8:	20000040 	.word	0x20000040
 80029dc:	2000003c 	.word	0x2000003c
 80029e0:	20000128 	.word	0x20000128
 80029e4:	20000124 	.word	0x20000124
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f2:	f000 fe93 	bl	800371c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <xTaskGetTickCountFromISR+0x20>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a00:	683b      	ldr	r3, [r7, #0]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000118 	.word	0x20000118

08002a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <xTaskIncrementTick+0x14c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 8092 	bne.w	8002b48 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a24:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <xTaskIncrementTick+0x150>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <xTaskIncrementTick+0x150>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d120      	bne.n	8002a7a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <xTaskIncrementTick+0x154>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <xTaskIncrementTick+0x48>
        __asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	603b      	str	r3, [r7, #0]
    }
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <xTaskIncrementTick+0x46>
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <xTaskIncrementTick+0x154>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <xTaskIncrementTick+0x158>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <xTaskIncrementTick+0x154>)
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <xTaskIncrementTick+0x158>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <xTaskIncrementTick+0x15c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <xTaskIncrementTick+0x15c>)
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	f000 f987 	bl	8002d88 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <xTaskIncrementTick+0x160>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d34c      	bcc.n	8002b1e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <xTaskIncrementTick+0x154>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <xTaskIncrementTick+0x160>)
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	601a      	str	r2, [r3, #0]
                    break;
 8002a96:	e042      	b.n	8002b1e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <xTaskIncrementTick+0x154>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d203      	bcs.n	8002ab8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <xTaskIncrementTick+0x160>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ab6:	e032      	b.n	8002b1e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fc3d 	bl	800233c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3318      	adds	r3, #24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc34 	bl	800233c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 faf2 	bl	80060c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <xTaskIncrementTick+0x164>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <xTaskIncrementTick+0x164>)
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <xTaskIncrementTick+0x168>)
 8002afc:	441a      	add	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3304      	adds	r3, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7ff fbbc 	bl	8002282 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <xTaskIncrementTick+0x16c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3b5      	bcc.n	8002a84 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b1c:	e7b2      	b.n	8002a84 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <xTaskIncrementTick+0x16c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	4914      	ldr	r1, [pc, #80]	; (8002b78 <xTaskIncrementTick+0x168>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d901      	bls.n	8002b3a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <xTaskIncrementTick+0x170>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	e004      	b.n	8002b52 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <xTaskIncrementTick+0x174>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <xTaskIncrementTick+0x174>)
 8002b50:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b52:	697b      	ldr	r3, [r7, #20]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000013c 	.word	0x2000013c
 8002b60:	20000118 	.word	0x20000118
 8002b64:	200000cc 	.word	0x200000cc
 8002b68:	200000d0 	.word	0x200000d0
 8002b6c:	2000012c 	.word	0x2000012c
 8002b70:	20000134 	.word	0x20000134
 8002b74:	2000011c 	.word	0x2000011c
 8002b78:	20000040 	.word	0x20000040
 8002b7c:	2000003c 	.word	0x2000003c
 8002b80:	20000128 	.word	0x20000128
 8002b84:	20000124 	.word	0x20000124

08002b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <vTaskSwitchContext+0xbc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <vTaskSwitchContext+0xc0>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b9c:	e04d      	b.n	8002c3a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <vTaskSwitchContext+0xc0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <vTaskSwitchContext+0xc4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f1c3 031f 	rsb	r3, r3, #31
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4925      	ldr	r1, [pc, #148]	; (8002c50 <vTaskSwitchContext+0xc8>)
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
    }
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <vTaskSwitchContext+0x5a>
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <vTaskSwitchContext+0xc8>)
 8002bf0:	4413      	add	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3308      	adds	r3, #8
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d104      	bne.n	8002c14 <vTaskSwitchContext+0x8c>
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <vTaskSwitchContext+0xcc>)
 8002c1c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <vTaskSwitchContext+0xcc>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <vTaskSwitchContext+0xd0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d102      	bne.n	8002c30 <vTaskSwitchContext+0xa8>
 8002c2a:	f003 f9a9 	bl	8005f80 <SEGGER_SYSVIEW_OnIdle>
}
 8002c2e:	e004      	b.n	8002c3a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <vTaskSwitchContext+0xcc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fa01 	bl	800603c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000013c 	.word	0x2000013c
 8002c48:	20000128 	.word	0x20000128
 8002c4c:	2000011c 	.word	0x2000011c
 8002c50:	20000040 	.word	0x20000040
 8002c54:	2000003c 	.word	0x2000003c
 8002c58:	20000138 	.word	0x20000138

08002c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c64:	f000 f852 	bl	8002d0c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <prvIdleTask+0x28>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d9f9      	bls.n	8002c64 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <prvIdleTask+0x2c>)
 8002c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c80:	e7f0      	b.n	8002c64 <prvIdleTask+0x8>
 8002c82:	bf00      	nop
 8002c84:	20000040 	.word	0x20000040
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	e00c      	b.n	8002cb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <prvInitialiseTaskLists+0x60>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fabe 	bl	8002228 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d9ef      	bls.n	8002c98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <prvInitialiseTaskLists+0x64>)
 8002cba:	f7ff fab5 	bl	8002228 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cbe:	480d      	ldr	r0, [pc, #52]	; (8002cf4 <prvInitialiseTaskLists+0x68>)
 8002cc0:	f7ff fab2 	bl	8002228 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <prvInitialiseTaskLists+0x6c>)
 8002cc6:	f7ff faaf 	bl	8002228 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002cca:	480c      	ldr	r0, [pc, #48]	; (8002cfc <prvInitialiseTaskLists+0x70>)
 8002ccc:	f7ff faac 	bl	8002228 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <prvInitialiseTaskLists+0x74>)
 8002cd2:	f7ff faa9 	bl	8002228 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <prvInitialiseTaskLists+0x78>)
 8002cd8:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <prvInitialiseTaskLists+0x64>)
 8002cda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <prvInitialiseTaskLists+0x7c>)
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <prvInitialiseTaskLists+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000040 	.word	0x20000040
 8002cf0:	200000a4 	.word	0x200000a4
 8002cf4:	200000b8 	.word	0x200000b8
 8002cf8:	200000d4 	.word	0x200000d4
 8002cfc:	200000e8 	.word	0x200000e8
 8002d00:	20000100 	.word	0x20000100
 8002d04:	200000cc 	.word	0x200000cc
 8002d08:	200000d0 	.word	0x200000d0

08002d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d12:	e019      	b.n	8002d48 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d14:	f000 fc16 	bl	8003544 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <prvCheckTasksWaitingTermination+0x50>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fb09 	bl	800233c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvCheckTasksWaitingTermination+0x54>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <prvCheckTasksWaitingTermination+0x54>)
 8002d32:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d3c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d3e:	f000 fc31 	bl	80035a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f810 	bl	8002d68 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <prvCheckTasksWaitingTermination+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e1      	bne.n	8002d14 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200000e8 	.word	0x200000e8
 8002d60:	20000114 	.word	0x20000114
 8002d64:	200000fc 	.word	0x200000fc

08002d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fdf1 	bl	800395c <vPortFree>
                vPortFree( pxTCB );
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fdee 	bl	800395c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <prvResetNextTaskUnblockTime+0x30>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <prvResetNextTaskUnblockTime+0x34>)
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d9e:	e005      	b.n	8002dac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <prvResetNextTaskUnblockTime+0x30>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <prvResetNextTaskUnblockTime+0x34>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200000cc 	.word	0x200000cc
 8002dbc:	20000134 	.word	0x20000134

08002dc0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	613b      	str	r3, [r7, #16]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002dea:	f000 fbab 	bl	8003544 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	3354      	adds	r3, #84	; 0x54
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d022      	beq.n	8002e46 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	3214      	adds	r2, #20
 8002e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	43d2      	mvns	r2, r2
 8002e10:	4011      	ands	r1, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	3214      	adds	r2, #20
 8002e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6a38      	ldr	r0, [r7, #32]
 8002e32:	f000 f963 	bl	80030fc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <xTaskGenericNotifyWait+0x10c>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e46:	f000 fbad 	bl	80035a4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002e4a:	f000 fb7b 	bl	8003544 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	2040      	movs	r0, #64	; 0x40
 8002e5c:	f002 fc0c 	bl	8005678 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	3214      	adds	r2, #20
 8002e6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3354      	adds	r3, #84	; 0x54
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d002      	beq.n	8002e8e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e00e      	b.n	8002eac <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	3214      	adds	r2, #20
 8002e96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	43d2      	mvns	r2, r2
 8002e9e:	4011      	ands	r1, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	3214      	adds	r2, #20
 8002ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <xTaskGenericNotifyWait+0x108>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3354      	adds	r3, #84	; 0x54
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002eba:	f000 fb73 	bl	80035a4 <vPortExitCritical>

        return xReturn;
 8002ebe:	697b      	ldr	r3, [r7, #20]
    }
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2000003c 	.word	0x2000003c
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b092      	sub	sp, #72	; 0x48
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f1a:	f000 fbff 	bl	800371c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002f22:	f3ef 8211 	mrs	r2, BASEPRI
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	627a      	str	r2, [r7, #36]	; 0x24
 8002f38:	623b      	str	r3, [r7, #32]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	3214      	adds	r2, #20
 8002f4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f50:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4413      	add	r3, r2
 8002f58:	3354      	adds	r3, #84	; 0x54
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	3354      	adds	r3, #84	; 0x54
 8002f68:	2202      	movs	r2, #2
 8002f6a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d83b      	bhi.n	8002fea <xTaskGenericNotifyFromISR+0x11a>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <xTaskGenericNotifyFromISR+0xa8>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08003009 	.word	0x08003009
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fc1 	.word	0x08002fc1
 8002f88:	08002fcf 	.word	0x08002fcf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	3214      	adds	r2, #20
 8002f92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	ea42 0103 	orr.w	r1, r2, r3
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	3214      	adds	r2, #20
 8002fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fa6:	e032      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	3214      	adds	r2, #20
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	1c59      	adds	r1, r3, #1
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	3214      	adds	r2, #20
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fbe:	e026      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	3214      	adds	r2, #20
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002fcc:	e01f      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d006      	beq.n	8002fe4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	3214      	adds	r2, #20
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002fe2:	e014      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002fe8:	e011      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <xTaskGenericNotifyFromISR+0x210>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	61fb      	str	r3, [r7, #28]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800300c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	4618      	mov	r0, r3
 8003012:	f003 f8f7 	bl	8006204 <SEGGER_SYSVIEW_ShrinkId>
 8003016:	78f9      	ldrb	r1, [r7, #3]
 8003018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301c:	9201      	str	r2, [sp, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4601      	mov	r1, r0
 8003026:	203f      	movs	r0, #63	; 0x3f
 8003028:	f002 fbb8 	bl	800579c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800302c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003030:	2b01      	cmp	r3, #1
 8003032:	d149      	bne.n	80030c8 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	61bb      	str	r3, [r7, #24]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <xTaskGenericNotifyFromISR+0x214>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d120      	bne.n	800309c <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	3304      	adds	r3, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f96c 	bl	800233c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	4618      	mov	r0, r3
 8003068:	f003 f82a 	bl	80060c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <xTaskGenericNotifyFromISR+0x218>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <xTaskGenericNotifyFromISR+0x218>)
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <xTaskGenericNotifyFromISR+0x21c>)
 800308c:	441a      	add	r2, r3
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff f8f4 	bl	8002282 <vListInsertEnd>
 800309a:	e005      	b.n	80030a8 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	3318      	adds	r3, #24
 80030a0:	4619      	mov	r1, r3
 80030a2:	4813      	ldr	r0, [pc, #76]	; (80030f0 <xTaskGenericNotifyFromISR+0x220>)
 80030a4:	f7ff f8ed 	bl	8002282 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <xTaskGenericNotifyFromISR+0x224>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d908      	bls.n	80030c8 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <xTaskGenericNotifyFromISR+0x228>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030d2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80030d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80030d6:	4618      	mov	r0, r3
 80030d8:	3740      	adds	r7, #64	; 0x40
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000118 	.word	0x20000118
 80030e4:	2000013c 	.word	0x2000013c
 80030e8:	2000011c 	.word	0x2000011c
 80030ec:	20000040 	.word	0x20000040
 80030f0:	200000d4 	.word	0x200000d4
 80030f4:	2000003c 	.word	0x2000003c
 80030f8:	20000128 	.word	0x20000128

080030fc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3304      	adds	r3, #4
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff f912 	bl	800233c <uxListRemove>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2201      	movs	r2, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4013      	ands	r3, r2
 8003132:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003134:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d110      	bne.n	8003160 <prvAddCurrentTaskToDelayedList+0x64>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	211b      	movs	r1, #27
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fffa 	bl	8006144 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4820      	ldr	r0, [pc, #128]	; (80031dc <prvAddCurrentTaskToDelayedList+0xe0>)
 800315a:	f7ff f892 	bl	8002282 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800315e:	e032      	b.n	80031c6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	d20f      	bcs.n	8003198 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2104      	movs	r1, #4
 800317e:	4618      	mov	r0, r3
 8003180:	f002 ffe0 	bl	8006144 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7ff f89a 	bl	80022ca <vListInsert>
}
 8003196:	e016      	b.n	80031c6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2104      	movs	r1, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f002 ffd0 	bl	8006144 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7ff f88a 	bl	80022ca <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d202      	bcs.n	80031c6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6013      	str	r3, [r2, #0]
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000118 	.word	0x20000118
 80031d4:	2000003c 	.word	0x2000003c
 80031d8:	2000011c 	.word	0x2000011c
 80031dc:	20000100 	.word	0x20000100
 80031e0:	200000d0 	.word	0x200000d0
 80031e4:	200000cc 	.word	0x200000cc
 80031e8:	20000134 	.word	0x20000134

080031ec <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b04      	subs	r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003204:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b04      	subs	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b04      	subs	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <pxPortInitialiseStack+0x64>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3b14      	subs	r3, #20
 8003226:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3b04      	subs	r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f06f 0202 	mvn.w	r2, #2
 800323a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b20      	subs	r3, #32
 8003240:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003242:	68fb      	ldr	r3, [r7, #12]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	08003255 	.word	0x08003255

08003254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <prvTaskExitError+0x54>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d00a      	beq.n	800327e <prvTaskExitError+0x2a>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	60fb      	str	r3, [r7, #12]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <prvTaskExitError+0x28>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60bb      	str	r3, [r7, #8]
    }
 8003290:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003292:	bf00      	nop
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0fc      	beq.n	8003294 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	20000010 	.word	0x20000010
 80032ac:	00000000 	.word	0x00000000

080032b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <pxCurrentTCBConst2>)
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	f380 8809 	msr	PSP, r0
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	4770      	bx	lr
 80032cc:	f3af 8000 	nop.w

080032d0 <pxCurrentTCBConst2>:
 80032d0:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop

080032d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <prvPortStartFirstTask+0x24>)
 80032da:	6800      	ldr	r0, [r0, #0]
 80032dc:	6800      	ldr	r0, [r0, #0]
 80032de:	f380 8808 	msr	MSP, r0
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8814 	msr	CONTROL, r0
 80032ea:	b662      	cpsie	i
 80032ec:	b661      	cpsie	f
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	df00      	svc	0
 80032f8:	bf00      	nop
 80032fa:	0000      	.short	0x0000
 80032fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop

08003304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800330a:	4b46      	ldr	r3, [pc, #280]	; (8003424 <xPortStartScheduler+0x120>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a46      	ldr	r2, [pc, #280]	; (8003428 <xPortStartScheduler+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10a      	bne.n	800332a <xPortStartScheduler+0x26>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	613b      	str	r3, [r7, #16]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <xPortStartScheduler+0x120>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <xPortStartScheduler+0x128>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10a      	bne.n	800334a <xPortStartScheduler+0x46>
        __asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	60fb      	str	r3, [r7, #12]
    }
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800334a:	4b39      	ldr	r3, [pc, #228]	; (8003430 <xPortStartScheduler+0x12c>)
 800334c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <xPortStartScheduler+0x130>)
 8003370:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <xPortStartScheduler+0x134>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003378:	e009      	b.n	800338e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <xPortStartScheduler+0x134>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3b01      	subs	r3, #1
 8003380:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <xPortStartScheduler+0x134>)
 8003382:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d0ef      	beq.n	800337a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <xPortStartScheduler+0x134>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00a      	beq.n	80033bc <xPortStartScheduler+0xb8>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	60bb      	str	r3, [r7, #8]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <xPortStartScheduler+0x134>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <xPortStartScheduler+0x134>)
 80033c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <xPortStartScheduler+0x134>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ce:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <xPortStartScheduler+0x134>)
 80033d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <xPortStartScheduler+0x138>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <xPortStartScheduler+0x138>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033e6:	4b15      	ldr	r3, [pc, #84]	; (800343c <xPortStartScheduler+0x138>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a14      	ldr	r2, [pc, #80]	; (800343c <xPortStartScheduler+0x138>)
 80033ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80033f2:	f000 f963 	bl	80036bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <xPortStartScheduler+0x13c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80033fc:	f000 f982 	bl	8003704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xPortStartScheduler+0x140>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <xPortStartScheduler+0x140>)
 8003406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800340c:	f7ff ff64 	bl	80032d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003410:	f7ff fbba 	bl	8002b88 <vTaskSwitchContext>
    prvTaskExitError();
 8003414:	f7ff ff1e 	bl	8003254 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00
 8003428:	410fc271 	.word	0x410fc271
 800342c:	410fc270 	.word	0x410fc270
 8003430:	e000e400 	.word	0xe000e400
 8003434:	20000140 	.word	0x20000140
 8003438:	20000144 	.word	0x20000144
 800343c:	e000ed20 	.word	0xe000ed20
 8003440:	20000010 	.word	0x20000010
 8003444:	e000ef34 	.word	0xe000ef34

08003448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <vInitPrioGroupValue+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d10a      	bne.n	800346e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	613b      	str	r3, [r7, #16]
    }
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <vInitPrioGroupValue+0xe4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a30      	ldr	r2, [pc, #192]	; (8003534 <vInitPrioGroupValue+0xec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10a      	bne.n	800348e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	60fb      	str	r3, [r7, #12]
    }
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <vInitPrioGroupValue+0xf0>)
 8003490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <vInitPrioGroupValue+0xf4>)
 80034b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034bc:	e009      	b.n	80034d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d0ef      	beq.n	80034be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <vInitPrioGroupValue+0xf8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1c3 0307 	rsb	r3, r3, #7
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00a      	beq.n	8003500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <vInitPrioGroupValue+0xf8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <vInitPrioGroupValue+0xf8>)
 8003514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	410fc271 	.word	0x410fc271
 8003534:	410fc270 	.word	0x410fc270
 8003538:	e000e400 	.word	0xe000e400
 800353c:	20000140 	.word	0x20000140
 8003540:	20000144 	.word	0x20000144

08003544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	607b      	str	r3, [r7, #4]
    }
 800355c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <vPortEnterCritical+0x58>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <vPortEnterCritical+0x58>)
 8003566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <vPortEnterCritical+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10f      	bne.n	8003590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <vPortEnterCritical+0x5c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <vPortEnterCritical+0x4c>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vPortEnterCritical+0x4a>
    }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	20000010 	.word	0x20000010
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <vPortExitCritical+0x50>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <vPortExitCritical+0x24>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	607b      	str	r3, [r7, #4]
    }
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <vPortExitCritical+0x50>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <vPortExitCritical+0x50>)
 80035d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <vPortExitCritical+0x50>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <vPortExitCritical+0x42>
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f383 8811 	msr	BASEPRI, r3
    }
 80035e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000010 	.word	0x20000010
	...

08003600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003600:	f3ef 8009 	mrs	r0, PSP
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <pxCurrentTCBConst>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	f01e 0f10 	tst.w	lr, #16
 8003610:	bf08      	it	eq
 8003612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361a:	6010      	str	r0, [r2, #0]
 800361c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003624:	f380 8811 	msr	BASEPRI, r0
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f7ff faaa 	bl	8002b88 <vTaskSwitchContext>
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f380 8811 	msr	BASEPRI, r0
 800363c:	bc09      	pop	{r0, r3}
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	6808      	ldr	r0, [r1, #0]
 8003642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003646:	f01e 0f10 	tst.w	lr, #16
 800364a:	bf08      	it	eq
 800364c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003650:	f380 8809 	msr	PSP, r0
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	f3af 8000 	nop.w

08003660 <pxCurrentTCBConst>:
 8003660:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
        __asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
    }
 8003680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003682:	f002 fc03 	bl	8005e8c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003686:	f7ff f9c3 	bl	8002a10 <xTaskIncrementTick>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d006      	beq.n	800369e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003690:	f002 fc5a 	bl	8005f48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <SysTick_Handler+0x50>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e001      	b.n	80036a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800369e:	f002 fc37 	bl	8005f10 <SEGGER_SYSVIEW_RecordExitISR>
 80036a2:	2300      	movs	r3, #0
 80036a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f383 8811 	msr	BASEPRI, r3
    }
 80036ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <vPortSetupTimerInterrupt+0x38>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <vPortSetupTimerInterrupt+0x3c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <vPortSetupTimerInterrupt+0x40>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <vPortSetupTimerInterrupt+0x44>)
 80036da:	3b01      	subs	r3, #1
 80036dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e010 	.word	0xe000e010
 80036f4:	e000e018 	.word	0xe000e018
 80036f8:	20000000 	.word	0x20000000
 80036fc:	10624dd3 	.word	0x10624dd3
 8003700:	e000e014 	.word	0xe000e014

08003704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003714 <vPortEnableVFP+0x10>
 8003708:	6801      	ldr	r1, [r0, #0]
 800370a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800370e:	6001      	str	r1, [r0, #0]
 8003710:	4770      	bx	lr
 8003712:	0000      	.short	0x0000
 8003714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop

0800371c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003722:	f3ef 8305 	mrs	r3, IPSR
 8003726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d914      	bls.n	8003758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <vPortValidateInterruptPriority+0x70>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <vPortValidateInterruptPriority+0x74>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	7afa      	ldrb	r2, [r7, #11]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20a      	bcs.n	8003758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	607b      	str	r3, [r7, #4]
    }
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <vPortValidateInterruptPriority+0x78>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <vPortValidateInterruptPriority+0x7c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d90a      	bls.n	800377e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	603b      	str	r3, [r7, #0]
    }
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <vPortValidateInterruptPriority+0x60>
    }
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e3f0 	.word	0xe000e3f0
 8003790:	20000140 	.word	0x20000140
 8003794:	e000ed0c 	.word	0xe000ed0c
 8003798:	20000144 	.word	0x20000144

0800379c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08a      	sub	sp, #40	; 0x28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80037a8:	f7ff f872 	bl	8002890 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037ac:	4b65      	ldr	r3, [pc, #404]	; (8003944 <pvPortMalloc+0x1a8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037b4:	f000 f934 	bl	8003a20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037b8:	4b63      	ldr	r3, [pc, #396]	; (8003948 <pvPortMalloc+0x1ac>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 80a7 	bne.w	8003914 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02d      	beq.n	8003828 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037cc:	2208      	movs	r2, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d227      	bcs.n	8003828 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80037d8:	2208      	movs	r2, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d021      	beq.n	800382e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f023 0307 	bic.w	r3, r3, #7
 80037f0:	3308      	adds	r3, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d214      	bcs.n	8003822 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f023 0307 	bic.w	r3, r3, #7
 80037fe:	3308      	adds	r3, #8
 8003800:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <pvPortMalloc+0x92>
        __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	617b      	str	r3, [r7, #20]
    }
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003826:	e002      	b.n	800382e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e000      	b.n	8003830 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800382e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06e      	beq.n	8003914 <pvPortMalloc+0x178>
 8003836:	4b45      	ldr	r3, [pc, #276]	; (800394c <pvPortMalloc+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d869      	bhi.n	8003914 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <pvPortMalloc+0x1b4>)
 8003842:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003844:	4b42      	ldr	r3, [pc, #264]	; (8003950 <pvPortMalloc+0x1b4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384a:	e004      	b.n	8003856 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d903      	bls.n	8003868 <pvPortMalloc+0xcc>
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003868:	4b36      	ldr	r3, [pc, #216]	; (8003944 <pvPortMalloc+0x1a8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386e:	429a      	cmp	r2, r3
 8003870:	d050      	beq.n	8003914 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2208      	movs	r2, #8
 8003878:	4413      	add	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	2308      	movs	r3, #8
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	429a      	cmp	r2, r3
 8003892:	d91f      	bls.n	80038d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <pvPortMalloc+0x120>
        __asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	613b      	str	r3, [r7, #16]
    }
 80038b8:	bf00      	nop
 80038ba:	e7fe      	b.n	80038ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f000 f908 	bl	8003ae4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <pvPortMalloc+0x1b0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	4a1b      	ldr	r2, [pc, #108]	; (800394c <pvPortMalloc+0x1b0>)
 80038e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <pvPortMalloc+0x1b0>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <pvPortMalloc+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d203      	bcs.n	80038f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038ee:	4b17      	ldr	r3, [pc, #92]	; (800394c <pvPortMalloc+0x1b0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <pvPortMalloc+0x1b8>)
 80038f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <pvPortMalloc+0x1ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	431a      	orrs	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <pvPortMalloc+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a11      	ldr	r2, [pc, #68]	; (8003958 <pvPortMalloc+0x1bc>)
 8003912:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003914:	f7fe ffca 	bl	80028ac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <pvPortMalloc+0x19c>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
    }
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <pvPortMalloc+0x19a>
    return pvReturn;
 8003938:	69fb      	ldr	r3, [r7, #28]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20012d50 	.word	0x20012d50
 8003948:	20012d64 	.word	0x20012d64
 800394c:	20012d54 	.word	0x20012d54
 8003950:	20012d48 	.word	0x20012d48
 8003954:	20012d58 	.word	0x20012d58
 8003958:	20012d5c 	.word	0x20012d5c

0800395c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04d      	beq.n	8003a0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800396e:	2308      	movs	r3, #8
 8003970:	425b      	negs	r3, r3
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4413      	add	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <vPortFree+0xb8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <vPortFree+0x44>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	60fb      	str	r3, [r7, #12]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <vPortFree+0x62>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60bb      	str	r3, [r7, #8]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <vPortFree+0xb8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01e      	beq.n	8003a0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11a      	bne.n	8003a0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <vPortFree+0xb8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039e4:	f7fe ff54 	bl	8002890 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <vPortFree+0xbc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <vPortFree+0xbc>)
 80039f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039f6:	6938      	ldr	r0, [r7, #16]
 80039f8:	f000 f874 	bl	8003ae4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <vPortFree+0xc0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <vPortFree+0xc0>)
 8003a04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a06:	f7fe ff51 	bl	80028ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20012d64 	.word	0x20012d64
 8003a18:	20012d54 	.word	0x20012d54
 8003a1c:	20012d60 	.word	0x20012d60

08003a20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <prvHeapInit+0xac>)
 8003a2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3307      	adds	r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0307 	bic.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <prvHeapInit+0xac>)
 8003a50:	4413      	add	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a58:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <prvHeapInit+0xb0>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <prvHeapInit+0xb0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <prvHeapInit+0xb4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <prvHeapInit+0xb4>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <prvHeapInit+0xb8>)
 8003aae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <prvHeapInit+0xbc>)
 8003ab6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <prvHeapInit+0xc0>)
 8003aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000148 	.word	0x20000148
 8003ad0:	20012d48 	.word	0x20012d48
 8003ad4:	20012d50 	.word	0x20012d50
 8003ad8:	20012d58 	.word	0x20012d58
 8003adc:	20012d54 	.word	0x20012d54
 8003ae0:	20012d64 	.word	0x20012d64

08003ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <prvInsertBlockIntoFreeList+0xac>)
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e002      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x14>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d8f7      	bhi.n	8003af2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d108      	bne.n	8003b26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	441a      	add	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d118      	bne.n	8003b6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <prvInsertBlockIntoFreeList+0xb0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d00d      	beq.n	8003b62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e008      	b.n	8003b74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <prvInsertBlockIntoFreeList+0xb0>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e003      	b.n	8003b74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d002      	beq.n	8003b82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20012d48 	.word	0x20012d48
 8003b94:	20012d50 	.word	0x20012d50

08003b98 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b9c:	4803      	ldr	r0, [pc, #12]	; (8003bac <_cbSendSystemDesc+0x14>)
 8003b9e:	f002 f91f 	bl	8005de0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003ba2:	4803      	ldr	r0, [pc, #12]	; (8003bb0 <_cbSendSystemDesc+0x18>)
 8003ba4:	f002 f91c 	bl	8005de0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0800663c 	.word	0x0800663c
 8003bb0:	08006680 	.word	0x08006680

08003bb4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003bc2:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <SEGGER_SYSVIEW_Conf+0x28>)
 8003bc4:	f001 fc50 	bl	8005468 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003bc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003bcc:	f001 fc90 	bl	80054f0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	08003b99 	.word	0x08003b99
 8003bdc:	08006720 	.word	0x08006720

08003be0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e033      	b.n	8003c54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003bec:	491e      	ldr	r1, [pc, #120]	; (8003c68 <_cbSendTaskList+0x88>)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	491a      	ldr	r1, [pc, #104]	; (8003c68 <_cbSendTaskList+0x88>)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	4c16      	ldr	r4, [pc, #88]	; (8003c68 <_cbSendTaskList+0x88>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4423      	add	r3, r4
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	681c      	ldr	r4, [r3, #0]
 8003c20:	4d11      	ldr	r5, [pc, #68]	; (8003c68 <_cbSendTaskList+0x88>)
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	442b      	add	r3, r5
 8003c2e:	330c      	adds	r3, #12
 8003c30:	681d      	ldr	r5, [r3, #0]
 8003c32:	4e0d      	ldr	r6, [pc, #52]	; (8003c68 <_cbSendTaskList+0x88>)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4433      	add	r3, r6
 8003c40:	3310      	adds	r3, #16
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	462b      	mov	r3, r5
 8003c48:	4622      	mov	r2, r4
 8003c4a:	f000 f925 	bl	8003e98 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3301      	adds	r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <_cbSendTaskList+0x8c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3c6      	bcc.n	8003bec <_cbSendTaskList+0xc>
  }
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c68:	20012d68 	.word	0x20012d68
 8003c6c:	20012e08 	.word	0x20012e08

08003c70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c76:	f7fe feb9 	bl	80029ec <xTaskGetTickCountFromISR>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	f04f 0400 	mov.w	r4, #0
 8003c92:	f04f 0500 	mov.w	r5, #0
 8003c96:	015d      	lsls	r5, r3, #5
 8003c98:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003c9c:	0154      	lsls	r4, r2, #5
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	1a12      	subs	r2, r2, r0
 8003ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca8:	f04f 0400 	mov.w	r4, #0
 8003cac:	f04f 0500 	mov.w	r5, #0
 8003cb0:	009d      	lsls	r5, r3, #2
 8003cb2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003cb6:	0094      	lsls	r4, r2, #2
 8003cb8:	4622      	mov	r2, r4
 8003cba:	462b      	mov	r3, r5
 8003cbc:	1812      	adds	r2, r2, r0
 8003cbe:	eb41 0303 	adc.w	r3, r1, r3
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	00d9      	lsls	r1, r3, #3
 8003ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cd0:	00d0      	lsls	r0, r2, #3
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003cda:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bdb0      	pop	{r4, r5, r7, pc}

08003ce8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	492b      	ldr	r1, [pc, #172]	; (8003da8 <SYSVIEW_AddTask+0xc0>)
 8003cfa:	68b8      	ldr	r0, [r7, #8]
 8003cfc:	f002 fc30 	bl	8006560 <memcmp>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04b      	beq.n	8003d9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b07      	cmp	r3, #7
 8003d0c:	d903      	bls.n	8003d16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d0e:	4828      	ldr	r0, [pc, #160]	; (8003db0 <SYSVIEW_AddTask+0xc8>)
 8003d10:	f002 fb78 	bl	8006404 <SEGGER_SYSVIEW_Warn>
    return;
 8003d14:	e044      	b.n	8003da0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4926      	ldr	r1, [pc, #152]	; (8003db4 <SYSVIEW_AddTask+0xcc>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4921      	ldr	r1, [pc, #132]	; (8003db4 <SYSVIEW_AddTask+0xcc>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	491b      	ldr	r1, [pc, #108]	; (8003db4 <SYSVIEW_AddTask+0xcc>)
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	3308      	adds	r3, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d56:	4b15      	ldr	r3, [pc, #84]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4916      	ldr	r1, [pc, #88]	; (8003db4 <SYSVIEW_AddTask+0xcc>)
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	330c      	adds	r3, #12
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4910      	ldr	r1, [pc, #64]	; (8003db4 <SYSVIEW_AddTask+0xcc>)
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3310      	adds	r3, #16
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <SYSVIEW_AddTask+0xc4>)
 8003d8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f87e 	bl	8003e98 <SYSVIEW_SendTaskInfo>
 8003d9c:	e000      	b.n	8003da0 <SYSVIEW_AddTask+0xb8>
    return;
 8003d9e:	bf00      	nop

}
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	08006690 	.word	0x08006690
 8003dac:	20012e08 	.word	0x20012e08
 8003db0:	08006698 	.word	0x08006698
 8003db4:	20012d68 	.word	0x20012d68

08003db8 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	4930      	ldr	r1, [pc, #192]	; (8003e8c <SYSVIEW_UpdateTask+0xd4>)
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f002 fbc8 	bl	8006560 <memcmp>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d056      	beq.n	8003e84 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e00d      	b.n	8003df8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003ddc:	492c      	ldr	r1, [pc, #176]	; (8003e90 <SYSVIEW_UpdateTask+0xd8>)
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d008      	beq.n	8003e04 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <SYSVIEW_UpdateTask+0xdc>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d3ec      	bcc.n	8003ddc <SYSVIEW_UpdateTask+0x24>
 8003e02:	e000      	b.n	8003e06 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003e04:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003e06:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <SYSVIEW_UpdateTask+0xdc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d230      	bcs.n	8003e72 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003e10:	491f      	ldr	r1, [pc, #124]	; (8003e90 <SYSVIEW_UpdateTask+0xd8>)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3304      	adds	r3, #4
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003e24:	491a      	ldr	r1, [pc, #104]	; (8003e90 <SYSVIEW_UpdateTask+0xd8>)
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3308      	adds	r3, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003e38:	4915      	ldr	r1, [pc, #84]	; (8003e90 <SYSVIEW_UpdateTask+0xd8>)
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	330c      	adds	r3, #12
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003e4c:	4910      	ldr	r1, [pc, #64]	; (8003e90 <SYSVIEW_UpdateTask+0xd8>)
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f814 	bl	8003e98 <SYSVIEW_SendTaskInfo>
 8003e70:	e009      	b.n	8003e86 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff33 	bl	8003ce8 <SYSVIEW_AddTask>
 8003e82:	e000      	b.n	8003e86 <SYSVIEW_UpdateTask+0xce>
    return;
 8003e84:	bf00      	nop
  }
}
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	08006690 	.word	0x08006690
 8003e90:	20012d68 	.word	0x20012d68
 8003e94:	20012e08 	.word	0x20012e08

08003e98 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ea6:	f107 0314 	add.w	r3, r7, #20
 8003eaa:	2214      	movs	r2, #20
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 fb72 	bl	8006598 <memset>
  TaskInfo.TaskID     = TaskID;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 fe8f 	bl	8005bf0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ed2:	bf00      	nop
 8003ed4:	3728      	adds	r7, #40	; 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <__NVIC_EnableIRQ>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	; (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003f72:	f002 faa3 	bl	80064bc <SEGGER_SYSVIEW_IsStarted>
 8003f76:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003f7e:	f001 fcbb 	bl	80058f8 <SEGGER_SYSVIEW_Start>
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <_cbOnUARTRx+0x3c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d806      	bhi.n	8003fac <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <_cbOnUARTRx+0x3c>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <_cbOnUARTRx+0x3c>)
 8003fa8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003faa:	e009      	b.n	8003fc0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003fac:	f7ff ffde 	bl	8003f6c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <_cbOnUARTRx+0x3c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f000 fb9a 	bl	80046f4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003fc0:	bf00      	nop
}
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000014 	.word	0x20000014

08003fcc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <_cbOnUARTTx+0x5c>)
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d80f      	bhi.n	8003ffc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <_cbOnUARTTx+0x5c>)
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <_cbOnUARTTx+0x60>)
 8003fe4:	5c9a      	ldrb	r2, [r3, r2]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <_cbOnUARTTx+0x5c>)
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <_cbOnUARTTx+0x5c>)
 8003ff4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003ffa:	e00f      	b.n	800401c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <_cbOnUARTTx+0x5c>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fa19 	bl	800443c <SEGGER_RTT_ReadUpBufferNoLock>
 800400a:	4603      	mov	r3, r0
 800400c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	da02      	bge.n	800401a <_cbOnUARTTx+0x4e>
    r = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e000      	b.n	800401c <_cbOnUARTTx+0x50>
  }
Done:
 800401a:	bf00      	nop
  return r;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000014 	.word	0x20000014
 800402c:	08006728 	.word	0x08006728

08004030 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <SEGGER_UART_init+0x1c>)
 800403a:	4905      	ldr	r1, [pc, #20]	; (8004050 <SEGGER_UART_init+0x20>)
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f863 	bl	8004108 <HIF_UART_Init>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	08003f8d 	.word	0x08003f8d
 8004050:	08003fcd 	.word	0x08003fcd

08004054 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800405a:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <USART2_IRQHandler+0x80>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <USART2_IRQHandler+0x84>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 030b 	and.w	r3, r3, #11
 8004078:	2b00      	cmp	r3, #0
 800407a:	d108      	bne.n	800408e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <USART2_IRQHandler+0x88>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <USART2_IRQHandler+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	79fa      	ldrb	r2, [r7, #7]
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01a      	beq.n	80040ce <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <USART2_IRQHandler+0x8c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <USART2_IRQHandler+0x8c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1dfa      	adds	r2, r7, #7
 80040a6:	4610      	mov	r0, r2
 80040a8:	4798      	blx	r3
 80040aa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <USART2_IRQHandler+0x90>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <USART2_IRQHandler+0x90>)
 80040b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e006      	b.n	80040ce <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <USART2_IRQHandler+0x80>)
 80040c2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80040c4:	79fa      	ldrb	r2, [r7, #7]
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <USART2_IRQHandler+0x84>)
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e000      	b.n	80040ce <USART2_IRQHandler+0x7a>
      return;
 80040cc:	bf00      	nop
    }
  }
}
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004404 	.word	0x40004404
 80040dc:	20012e0c 	.word	0x20012e0c
 80040e0:	20012e10 	.word	0x20012e10
 80040e4:	4000440c 	.word	0x4000440c

080040e8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	4000440c 	.word	0x4000440c

08004108 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004114:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HIF_UART_Init+0xc8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <HIF_UART_Init+0xc8>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HIF_UART_Init+0xcc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <HIF_UART_Init+0xcc>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HIF_UART_Init+0xd0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004138:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004140:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <HIF_UART_Init+0xd0>)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004148:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HIF_UART_Init+0xd4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004154:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800415c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HIF_UART_Init+0xd4>)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004164:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HIF_UART_Init+0xd8>)
 8004166:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800416a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HIF_UART_Init+0xdc>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004172:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HIF_UART_Init+0xe0>)
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800417e:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HIF_UART_Init+0xe4>)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	3301      	adds	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004196:	d302      	bcc.n	800419e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004198:	f640 73ff 	movw	r3, #4095	; 0xfff
 800419c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <HIF_UART_Init+0xe8>)
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HIF_UART_Init+0xec>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80041b4:	4a10      	ldr	r2, [pc, #64]	; (80041f8 <HIF_UART_Init+0xf0>)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80041ba:	2106      	movs	r1, #6
 80041bc:	2026      	movs	r0, #38	; 0x26
 80041be:	f7ff feab 	bl	8003f18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80041c2:	2026      	movs	r0, #38	; 0x26
 80041c4:	f7ff fe8a 	bl	8003edc <__NVIC_EnableIRQ>
}
 80041c8:	bf00      	nop
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023840 	.word	0x40023840
 80041d4:	40023830 	.word	0x40023830
 80041d8:	40020020 	.word	0x40020020
 80041dc:	40020000 	.word	0x40020000
 80041e0:	4000440c 	.word	0x4000440c
 80041e4:	40004410 	.word	0x40004410
 80041e8:	40004414 	.word	0x40004414
 80041ec:	0501bd00 	.word	0x0501bd00
 80041f0:	40004408 	.word	0x40004408
 80041f4:	20012e0c 	.word	0x20012e0c
 80041f8:	20012e10 	.word	0x20012e10

080041fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <_DoInit+0x98>)
 8004204:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2203      	movs	r2, #3
 800420a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <_DoInit+0x9c>)
 8004216:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a20      	ldr	r2, [pc, #128]	; (800429c <_DoInit+0xa0>)
 800421c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004224:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <_DoInit+0x9c>)
 800423c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <_DoInit+0xa4>)
 8004242:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2210      	movs	r2, #16
 8004248:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3307      	adds	r3, #7
 8004260:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <_DoInit+0xa8>)
 8004262:	6810      	ldr	r0, [r2, #0]
 8004264:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004266:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a0e      	ldr	r2, [pc, #56]	; (80042a8 <_DoInit+0xac>)
 800426e:	6810      	ldr	r0, [r2, #0]
 8004270:	6018      	str	r0, [r3, #0]
 8004272:	8891      	ldrh	r1, [r2, #4]
 8004274:	7992      	ldrb	r2, [r2, #6]
 8004276:	8099      	strh	r1, [r3, #4]
 8004278:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800427a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004284:	f3bf 8f5f 	dmb	sy
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	20014394 	.word	0x20014394
 8004298:	080066e8 	.word	0x080066e8
 800429c:	20012e14 	.word	0x20012e14
 80042a0:	20013214 	.word	0x20013214
 80042a4:	080066f4 	.word	0x080066f4
 80042a8:	080066f8 	.word	0x080066f8

080042ac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d905      	bls.n	80042dc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
 80042da:	e007      	b.n	80042ec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	1acb      	subs	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3b01      	subs	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf28      	it	cs
 80042fa:	4613      	movcs	r3, r2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4293      	cmp	r3, r2
 8004304:	bf28      	it	cs
 8004306:	4613      	movcs	r3, r2
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f002 f92f 	bl	800657c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	4413      	add	r3, r2
 8004324:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	4413      	add	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	4413      	add	r3, r2
 800433c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	429a      	cmp	r2, r3
 8004346:	d101      	bne.n	800434c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800434c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1b2      	bne.n	80042c2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800435c:	6a3b      	ldr	r3, [r7, #32]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3728      	adds	r7, #40	; 0x28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004366:	b580      	push	{r7, lr}
 8004368:	b088      	sub	sp, #32
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d911      	bls.n	80043ae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	6938      	ldr	r0, [r7, #16]
 800439a:	f002 f8ef 	bl	800657c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800439e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	441a      	add	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80043ac:	e01f      	b.n	80043ee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	6938      	ldr	r0, [r7, #16]
 80043c2:	f002 f8db 	bl	800657c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	4413      	add	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4619      	mov	r1, r3
 80043de:	6938      	ldr	r0, [r7, #16]
 80043e0:	f002 f8cc 	bl	800657c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043e4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	60da      	str	r2, [r3, #12]
}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	429a      	cmp	r2, r3
 8004410:	d808      	bhi.n	8004424 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	3b01      	subs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e004      	b.n	800442e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	; 0x30
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004448:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004456:	f7ff fed1 	bl	80041fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4a37      	ldr	r2, [pc, #220]	; (8004544 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004468:	4413      	add	r3, r2
 800446a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	429a      	cmp	r2, r3
 8004486:	d92b      	bls.n	80044e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4293      	cmp	r3, r2
 8004498:	bf28      	it	cs
 800449a:	4613      	movcs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	4413      	add	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	6939      	ldr	r1, [r7, #16]
 80044ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ae:	f002 f865 	bl	800657c <memcpy>
    NumBytesRead += NumBytesRem;
 80044b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4413      	add	r3, r2
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	4413      	add	r3, r2
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d8:	429a      	cmp	r2, r3
 80044da:	d101      	bne.n	80044e0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80044dc:	2300      	movs	r3, #0
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4293      	cmp	r3, r2
 80044ee:	bf28      	it	cs
 80044f0:	4613      	movcs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d019      	beq.n	800452e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	4413      	add	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800450a:	f002 f837 	bl	800657c <memcpy>
    NumBytesRead += NumBytesRem;
 800450e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004538:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800453c:	4618      	mov	r0, r3
 800453e:	3730      	adds	r7, #48	; 0x30
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20014394 	.word	0x20014394

08004548 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	; 0x30
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <SEGGER_RTT_ReadNoLock+0x108>)
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <SEGGER_RTT_ReadNoLock+0x1e>
 8004562:	f7ff fe4b 	bl	80041fc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	3360      	adds	r3, #96	; 0x60
 8004572:	4a37      	ldr	r2, [pc, #220]	; (8004650 <SEGGER_RTT_ReadNoLock+0x108>)
 8004574:	4413      	add	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004588:	2300      	movs	r3, #0
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800458c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d92b      	bls.n	80045ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bf28      	it	cs
 80045a6:	4613      	movcs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	4413      	add	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	6939      	ldr	r1, [r7, #16]
 80045b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045ba:	f001 ffdf 	bl	800657c <memcpy>
    NumBytesRead += NumBytesRem;
 80045be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4413      	add	r3, r2
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d101      	bne.n	80045ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bf28      	it	cs
 80045fc:	4613      	movcs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d019      	beq.n	800463a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	4413      	add	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004616:	f001 ffb1 	bl	800657c <memcpy>
    NumBytesRead += NumBytesRem;
 800461a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	4413      	add	r3, r2
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004644:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004648:	4618      	mov	r0, r3
 800464a:	3730      	adds	r7, #48	; 0x30
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20014394 	.word	0x20014394

08004654 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	3360      	adds	r3, #96	; 0x60
 8004670:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004672:	4413      	add	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d029      	beq.n	80046d2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800467e:	2b02      	cmp	r3, #2
 8004680:	d82e      	bhi.n	80046e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004686:	2b01      	cmp	r3, #1
 8004688:	d013      	beq.n	80046b2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800468a:	e029      	b.n	80046e0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800468c:	6978      	ldr	r0, [r7, #20]
 800468e:	f7ff feb2 	bl	80043f6 <_GetAvailWriteSpace>
 8004692:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d202      	bcs.n	80046a2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80046a0:	e021      	b.n	80046e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff fe5b 	bl	8004366 <_WriteNoCheck>
    break;
 80046b0:	e019      	b.n	80046e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff fe9f 	bl	80043f6 <_GetAvailWriteSpace>
 80046b8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf28      	it	cs
 80046c2:	4613      	movcs	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7ff fe4b 	bl	8004366 <_WriteNoCheck>
    break;
 80046d0:	e009      	b.n	80046e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	69b9      	ldr	r1, [r7, #24]
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff fde8 	bl	80042ac <_WriteBlocking>
 80046dc:	61f8      	str	r0, [r7, #28]
    break;
 80046de:	e002      	b.n	80046e6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
    break;
 80046e4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046e6:	69fb      	ldr	r3, [r7, #28]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20014394 	.word	0x20014394

080046f4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800470e:	f7ff fd75 	bl	80041fc <_DoInit>
  SEGGER_RTT_LOCK();
 8004712:	f3ef 8311 	mrs	r3, BASEPRI
 8004716:	f04f 0120 	mov.w	r1, #32
 800471a:	f381 8811 	msr	BASEPRI, r1
 800471e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff95 	bl	8004654 <SEGGER_RTT_WriteDownBufferNoLock>
 800472a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20014394 	.word	0x20014394

08004740 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800474e:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <SEGGER_RTT_AllocUpBuffer+0x20>
 800475c:	f7ff fd4e 	bl	80041fc <_DoInit>
  SEGGER_RTT_LOCK();
 8004760:	f3ef 8311 	mrs	r3, BASEPRI
 8004764:	f04f 0120 	mov.w	r1, #32
 8004768:	f381 8811 	msr	BASEPRI, r1
 800476c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800476e:	4b35      	ldr	r3, [pc, #212]	; (8004844 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004770:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004776:	6939      	ldr	r1, [r7, #16]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	3304      	adds	r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	429a      	cmp	r2, r3
 800479c:	dbeb      	blt.n	8004776 <SEGGER_RTT_AllocUpBuffer+0x36>
 800479e:	e000      	b.n	80047a2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80047a0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	da3f      	bge.n	800482c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80047ac:	6939      	ldr	r1, [r7, #16]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80047c0:	6939      	ldr	r1, [r7, #16]
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	3304      	adds	r3, #4
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047d6:	6939      	ldr	r1, [r7, #16]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	3320      	adds	r3, #32
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	440b      	add	r3, r1
 80047f8:	3328      	adds	r3, #40	; 0x28
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	3324      	adds	r3, #36	; 0x24
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004812:	6939      	ldr	r1, [r7, #16]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	332c      	adds	r3, #44	; 0x2c
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004826:	f3bf 8f5f 	dmb	sy
 800482a:	e002      	b.n	8004832 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800482c:	f04f 33ff 	mov.w	r3, #4294967295
 8004830:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004838:	69fb      	ldr	r3, [r7, #28]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20014394 	.word	0x20014394

08004848 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004864:	f7ff fcca 	bl	80041fc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800486a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d82c      	bhi.n	80048cc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004872:	f3ef 8311 	mrs	r3, BASEPRI
 8004876:	f04f 0120 	mov.w	r1, #32
 800487a:	f381 8811 	msr	BASEPRI, r1
 800487e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	3360      	adds	r3, #96	; 0x60
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2200      	movs	r2, #0
 80048b4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048bc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	e002      	b.n	80048d2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20014394 	.word	0x20014394

080048e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00f      	beq.n	8004916 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80048f6:	e002      	b.n	80048fe <_EncodeStr+0x1e>
      Len++;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3301      	adds	r3, #1
 80048fc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f6      	bne.n	80048f8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d901      	bls.n	8004916 <_EncodeStr+0x36>
      Len = Limit;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2bfe      	cmp	r3, #254	; 0xfe
 800491a:	d806      	bhi.n	800492a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	60fa      	str	r2, [r7, #12]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e011      	b.n	800494e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	60fa      	str	r2, [r7, #12]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	60fa      	str	r2, [r7, #12]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	0a19      	lsrs	r1, r3, #8
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60fa      	str	r2, [r7, #12]
 800494a:	b2ca      	uxtb	r2, r1
 800494c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004952:	e00a      	b.n	800496a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	1c53      	adds	r3, r2, #1
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1c59      	adds	r1, r3, #1
 800495e:	60f9      	str	r1, [r7, #12]
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	701a      	strb	r2, [r3, #0]
    n++;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3301      	adds	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d3f0      	bcc.n	8004954 <_EncodeStr+0x74>
  }
  return pPayload;
 8004972:	68fb      	ldr	r3, [r7, #12]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <_HandleIncomingPacket+0xe0>)
 80049a0:	7e1b      	ldrb	r3, [r3, #24]
 80049a2:	4618      	mov	r0, r3
 80049a4:	1cfb      	adds	r3, r7, #3
 80049a6:	2201      	movs	r2, #1
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7ff fdcd 	bl	8004548 <SEGGER_RTT_ReadNoLock>
 80049ae:	4603      	mov	r3, r0
 80049b0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	dd54      	ble.n	8004a62 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	2b80      	cmp	r3, #128	; 0x80
 80049bc:	d032      	beq.n	8004a24 <_HandleIncomingPacket+0x8c>
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	dc42      	bgt.n	8004a48 <_HandleIncomingPacket+0xb0>
 80049c2:	2b07      	cmp	r3, #7
 80049c4:	dc16      	bgt.n	80049f4 <_HandleIncomingPacket+0x5c>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	dd3e      	ble.n	8004a48 <_HandleIncomingPacket+0xb0>
 80049ca:	3b01      	subs	r3, #1
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d83b      	bhi.n	8004a48 <_HandleIncomingPacket+0xb0>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <_HandleIncomingPacket+0x40>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049fb 	.word	0x080049fb
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a07 	.word	0x08004a07
 80049e4:	08004a0d 	.word	0x08004a0d
 80049e8:	08004a13 	.word	0x08004a13
 80049ec:	08004a19 	.word	0x08004a19
 80049f0:	08004a1f 	.word	0x08004a1f
 80049f4:	2b7f      	cmp	r3, #127	; 0x7f
 80049f6:	d036      	beq.n	8004a66 <_HandleIncomingPacket+0xce>
 80049f8:	e026      	b.n	8004a48 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80049fa:	f000 ff7d 	bl	80058f8 <SEGGER_SYSVIEW_Start>
      break;
 80049fe:	e037      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a00:	f001 f836 	bl	8005a70 <SEGGER_SYSVIEW_Stop>
      break;
 8004a04:	e034      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a06:	f001 fa0f 	bl	8005e28 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a0a:	e031      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a0c:	f001 f9d4 	bl	8005db8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a10:	e02e      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a12:	f001 f853 	bl	8005abc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a16:	e02b      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a18:	f001 fca2 	bl	8006360 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a1c:	e028      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a1e:	f001 fc81 	bl	8006324 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004a22:	e025      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <_HandleIncomingPacket+0xe0>)
 8004a26:	7e1b      	ldrb	r3, [r3, #24]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	1cfb      	adds	r3, r7, #3
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f7ff fd8a 	bl	8004548 <SEGGER_RTT_ReadNoLock>
 8004a34:	4603      	mov	r3, r0
 8004a36:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dd15      	ble.n	8004a6a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fbef 	bl	8006224 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a46:	e010      	b.n	8004a6a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	da0e      	bge.n	8004a6e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <_HandleIncomingPacket+0xe0>)
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	4618      	mov	r0, r3
 8004a56:	1cfb      	adds	r3, r7, #3
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7ff fd74 	bl	8004548 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a60:	e005      	b.n	8004a6e <_HandleIncomingPacket+0xd6>
    }
  }
 8004a62:	bf00      	nop
 8004a64:	e004      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
      break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <_HandleIncomingPacket+0xd8>
      break;
 8004a6e:	bf00      	nop
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	2001422c 	.word	0x2001422c

08004a7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	; 0x30
 8004a80:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004a82:	2301      	movs	r3, #1
 8004a84:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	e00b      	b.n	8004ab0 <_TrySendOverflowPacket+0x34>
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	09db      	lsrs	r3, r3, #7
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ab4:	d8f0      	bhi.n	8004a98 <_TrySendOverflowPacket+0x1c>
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ac6:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <_TrySendOverflowPacket+0xe4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	e00b      	b.n	8004af8 <_TrySendOverflowPacket+0x7c>
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	6279      	str	r1, [r7, #36]	; 0x24
 8004aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	09db      	lsrs	r3, r3, #7
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	2b7f      	cmp	r3, #127	; 0x7f
 8004afc:	d8f0      	bhi.n	8004ae0 <_TrySendOverflowPacket+0x64>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	627a      	str	r2, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	4618      	mov	r0, r3
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f7fb fb56 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b24:	4603      	mov	r3, r0
 8004b26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004b28:	f7ff fade 	bl	80040e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	e004      	b.n	8004b50 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	4a03      	ldr	r2, [pc, #12]	; (8004b5c <_TrySendOverflowPacket+0xe0>)
 8004b4e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b50:	693b      	ldr	r3, [r7, #16]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3730      	adds	r7, #48	; 0x30
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2001422c 	.word	0x2001422c
 8004b60:	e0001004 	.word	0xe0001004

08004b64 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b70:	4b6d      	ldr	r3, [pc, #436]	; (8004d28 <_SendPacket+0x1c4>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d010      	beq.n	8004b9a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004b78:	4b6b      	ldr	r3, [pc, #428]	; (8004d28 <_SendPacket+0x1c4>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a5 	beq.w	8004ccc <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004b82:	4b69      	ldr	r3, [pc, #420]	; (8004d28 <_SendPacket+0x1c4>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d109      	bne.n	8004b9e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004b8a:	f7ff ff77 	bl	8004a7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004b8e:	4b66      	ldr	r3, [pc, #408]	; (8004d28 <_SendPacket+0x1c4>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	f040 809c 	bne.w	8004cd0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004b98:	e001      	b.n	8004b9e <_SendPacket+0x3a>
    goto Send;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <_SendPacket+0x3c>
Send:
 8004b9e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b1f      	cmp	r3, #31
 8004ba4:	d809      	bhi.n	8004bba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004ba6:	4b60      	ldr	r3, [pc, #384]	; (8004d28 <_SendPacket+0x1c4>)
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f040 808d 	bne.w	8004cd4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b17      	cmp	r3, #23
 8004bbe:	d807      	bhi.n	8004bd0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e03d      	b.n	8004c4c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b7f      	cmp	r3, #127	; 0x7f
 8004bdc:	d912      	bls.n	8004c04 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	09da      	lsrs	r2, r3, #7
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	3a01      	subs	r2, #1
 8004bf6:	60fa      	str	r2, [r7, #12]
 8004bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	e006      	b.n	8004c12 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b7f      	cmp	r3, #127	; 0x7f
 8004c16:	d912      	bls.n	8004c3e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	09da      	lsrs	r2, r3, #7
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	60fa      	str	r2, [r7, #12]
 8004c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e006      	b.n	8004c4c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c4c:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <_SendPacket+0x1c8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c52:	4b35      	ldr	r3, [pc, #212]	; (8004d28 <_SendPacket+0x1c4>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	e00b      	b.n	8004c7e <_SendPacket+0x11a>
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	1c59      	adds	r1, r3, #1
 8004c6e:	6279      	str	r1, [r7, #36]	; 0x24
 8004c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	2b7f      	cmp	r3, #127	; 0x7f
 8004c82:	d8f0      	bhi.n	8004c66 <_SendPacket+0x102>
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	627a      	str	r2, [r7, #36]	; 0x24
 8004c8a:	6a3a      	ldr	r2, [r7, #32]
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <_SendPacket+0x1c4>)
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	f7fb fa94 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004cac:	f7ff fa1c 	bl	80040e8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <_SendPacket+0x1c4>)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	60d3      	str	r3, [r2, #12]
 8004cbc:	e00b      	b.n	8004cd6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <_SendPacket+0x1c4>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <_SendPacket+0x1c4>)
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e004      	b.n	8004cd6 <_SendPacket+0x172>
    goto SendDone;
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <_SendPacket+0x172>
      goto SendDone;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <_SendPacket+0x172>
      goto SendDone;
 8004cd4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <_SendPacket+0x1c4>)
 8004cd8:	7e1b      	ldrb	r3, [r3, #24]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <_SendPacket+0x1cc>)
 8004cde:	460b      	mov	r3, r1
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	440b      	add	r3, r1
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	336c      	adds	r3, #108	; 0x6c
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <_SendPacket+0x1c4>)
 8004cee:	7e1b      	ldrb	r3, [r3, #24]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	490f      	ldr	r1, [pc, #60]	; (8004d30 <_SendPacket+0x1cc>)
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4403      	add	r3, r0
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3370      	adds	r3, #112	; 0x70
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d00b      	beq.n	8004d1e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <_SendPacket+0x1c4>)
 8004d08:	789b      	ldrb	r3, [r3, #2]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <_SendPacket+0x1c4>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d14:	f7ff fe40 	bl	8004998 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d18:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <_SendPacket+0x1c4>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d1e:	bf00      	nop
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	2001422c 	.word	0x2001422c
 8004d2c:	e0001004 	.word	0xe0001004
 8004d30:	20014394 	.word	0x20014394

08004d34 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d80a      	bhi.n	8004d64 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6051      	str	r1, [r2, #4]
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d15a      	bne.n	8004e22 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	e00b      	b.n	8004da6 <_StoreChar+0x72>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	6279      	str	r1, [r7, #36]	; 0x24
 8004d98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	09db      	lsrs	r3, r3, #7
 8004da4:	623b      	str	r3, [r7, #32]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	2b7f      	cmp	r3, #127	; 0x7f
 8004daa:	d8f0      	bhi.n	8004d8e <_StoreChar+0x5a>
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	627a      	str	r2, [r7, #36]	; 0x24
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e00b      	b.n	8004dde <_StoreChar+0xaa>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	1c59      	adds	r1, r3, #1
 8004dce:	61f9      	str	r1, [r7, #28]
 8004dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	09db      	lsrs	r3, r3, #7
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b7f      	cmp	r3, #127	; 0x7f
 8004de2:	d8f0      	bhi.n	8004dc6 <_StoreChar+0x92>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	61fa      	str	r2, [r7, #28]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	221a      	movs	r2, #26
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff feb1 	bl	8004b64 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fdba 	bl	8004980 <_PreparePacket>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
  }
}
 8004e22:	bf00      	nop
 8004e24:	3728      	adds	r7, #40	; 0x28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e46:	e007      	b.n	8004e58 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	623b      	str	r3, [r7, #32]
    Width++;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3301      	adds	r3, #1
 8004e56:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d2f3      	bcs.n	8004e48 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d901      	bls.n	8004e6c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d11f      	bne.n	8004eb6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01c      	beq.n	8004eb6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <_PrintUnsigned+0x66>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <_PrintUnsigned+0x66>
        c = '0';
 8004e8c:	2330      	movs	r3, #48	; 0x30
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e001      	b.n	8004e96 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004e92:	2320      	movs	r3, #32
 8004e94:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e96:	e007      	b.n	8004ea8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004e9e:	7efb      	ldrb	r3, [r7, #27]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff ff46 	bl	8004d34 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <_PrintUnsigned+0x8a>
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3f0      	bcc.n	8004e98 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d903      	bls.n	8004ec4 <_PrintUnsigned+0x98>
      NumDigits--;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	e009      	b.n	8004ed8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d200      	bcs.n	8004ed8 <_PrintUnsigned+0xac>
        break;
 8004ed6:	e005      	b.n	8004ee4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ee2:	e7e8      	b.n	8004eb6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eec:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <_PrintUnsigned+0x128>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff14 	bl	8004d34 <_StoreChar>
    Digit /= Base;
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e3      	bne.n	8004ee4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d011      	beq.n	8004f4a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00e      	beq.n	8004f4a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f2c:	e006      	b.n	8004f3c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	3b01      	subs	r3, #1
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004f34:	2120      	movs	r1, #32
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fefc 	bl	8004d34 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <_PrintUnsigned+0x11e>
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3f1      	bcc.n	8004f2e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	08006738 	.word	0x08006738

08004f58 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bfb8      	it	lt
 8004f6c:	425b      	neglt	r3, r3
 8004f6e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004f70:	2301      	movs	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f74:	e007      	b.n	8004f86 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f7e:	613b      	str	r3, [r7, #16]
    Width++;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3301      	adds	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	daf3      	bge.n	8004f76 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d901      	bls.n	8004f9a <_PrintInt+0x42>
    Width = NumDigits;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <_PrintInt+0x5e>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	db04      	blt.n	8004fb0 <_PrintInt+0x58>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <_PrintInt+0x5e>
    FieldWidth--;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <_PrintInt+0x6e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <_PrintInt+0x9c>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fd6:	e006      	b.n	8004fe6 <_PrintInt+0x8e>
        FieldWidth--;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004fde:	2120      	movs	r1, #32
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fea7 	bl	8004d34 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <_PrintInt+0x9c>
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3f1      	bcc.n	8004fd8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da07      	bge.n	800500a <_PrintInt+0xb2>
    v = -v;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005000:	212d      	movs	r1, #45	; 0x2d
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fe96 	bl	8004d34 <_StoreChar>
 8005008:	e008      	b.n	800501c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005014:	212b      	movs	r1, #43	; 0x2b
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fe8c 	bl	8004d34 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d019      	beq.n	800505a <_PrintInt+0x102>
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d114      	bne.n	800505a <_PrintInt+0x102>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d111      	bne.n	800505a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800503c:	e006      	b.n	800504c <_PrintInt+0xf4>
        FieldWidth--;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	3b01      	subs	r3, #1
 8005042:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005044:	2130      	movs	r1, #48	; 0x30
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff fe74 	bl	8004d34 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <_PrintInt+0x102>
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3f1      	bcc.n	800503e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff fedf 	bl	8004e2c <_PrintUnsigned>
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b098      	sub	sp, #96	; 0x60
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	f04f 0120 	mov.w	r1, #32
 800508c:	f381 8811 	msr	BASEPRI, r1
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 8005092:	48b7      	ldr	r0, [pc, #732]	; (8005370 <_VPrintTarget+0x2f8>)
 8005094:	f7ff fc74 	bl	8004980 <_PreparePacket>
 8005098:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800509a:	4bb5      	ldr	r3, [pc, #724]	; (8005370 <_VPrintTarget+0x2f8>)
 800509c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80050be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8183 	beq.w	80053ce <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80050c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050cc:	2b25      	cmp	r3, #37	; 0x25
 80050ce:	f040 8170 	bne.w	80053b2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80050d2:	2300      	movs	r3, #0
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80050d6:	2301      	movs	r3, #1
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80050e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050e6:	3b23      	subs	r3, #35	; 0x23
 80050e8:	2b0d      	cmp	r3, #13
 80050ea:	d83f      	bhi.n	800516c <_VPrintTarget+0xf4>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <_VPrintTarget+0x7c>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	0800515d 	.word	0x0800515d
 80050f8:	0800516d 	.word	0x0800516d
 80050fc:	0800516d 	.word	0x0800516d
 8005100:	0800516d 	.word	0x0800516d
 8005104:	0800516d 	.word	0x0800516d
 8005108:	0800516d 	.word	0x0800516d
 800510c:	0800516d 	.word	0x0800516d
 8005110:	0800516d 	.word	0x0800516d
 8005114:	0800514d 	.word	0x0800514d
 8005118:	0800516d 	.word	0x0800516d
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800516d 	.word	0x0800516d
 8005124:	0800516d 	.word	0x0800516d
 8005128:	0800513d 	.word	0x0800513d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e01a      	b.n	8005172 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800513c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	64bb      	str	r3, [r7, #72]	; 0x48
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e012      	b.n	8005172 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800514c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	64bb      	str	r3, [r7, #72]	; 0x48
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e00a      	b.n	8005172 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515e:	f043 0308 	orr.w	r3, r3, #8
 8005162:	64bb      	str	r3, [r7, #72]	; 0x48
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e002      	b.n	8005172 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800516c:	2300      	movs	r3, #0
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
 8005170:	bf00      	nop
        }
      } while (v);
 8005172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1b0      	bne.n	80050da <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005178:	2300      	movs	r3, #0
 800517a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005188:	2b2f      	cmp	r3, #47	; 0x2f
 800518a:	d912      	bls.n	80051b2 <_VPrintTarget+0x13a>
 800518c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005190:	2b39      	cmp	r3, #57	; 0x39
 8005192:	d80e      	bhi.n	80051b2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800519a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	461a      	mov	r2, r3
 80051a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051aa:	4413      	add	r3, r2
 80051ac:	3b30      	subs	r3, #48	; 0x30
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80051b0:	e7e4      	b.n	800517c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80051b2:	2300      	movs	r3, #0
 80051b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80051be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051c2:	2b2e      	cmp	r3, #46	; 0x2e
 80051c4:	d11d      	bne.n	8005202 <_VPrintTarget+0x18a>
        sFormat++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80051d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051d8:	2b2f      	cmp	r3, #47	; 0x2f
 80051da:	d912      	bls.n	8005202 <_VPrintTarget+0x18a>
 80051dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051e0:	2b39      	cmp	r3, #57	; 0x39
 80051e2:	d80e      	bhi.n	8005202 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80051ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	461a      	mov	r2, r3
 80051f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051fa:	4413      	add	r3, r2
 80051fc:	3b30      	subs	r3, #48	; 0x30
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005200:	e7e4      	b.n	80051cc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800520a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800520e:	2b6c      	cmp	r3, #108	; 0x6c
 8005210:	d003      	beq.n	800521a <_VPrintTarget+0x1a2>
 8005212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005216:	2b68      	cmp	r3, #104	; 0x68
 8005218:	d107      	bne.n	800522a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005228:	e7ef      	b.n	800520a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800522a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800522e:	2b25      	cmp	r3, #37	; 0x25
 8005230:	f000 80b3 	beq.w	800539a <_VPrintTarget+0x322>
 8005234:	2b25      	cmp	r3, #37	; 0x25
 8005236:	f2c0 80b7 	blt.w	80053a8 <_VPrintTarget+0x330>
 800523a:	2b78      	cmp	r3, #120	; 0x78
 800523c:	f300 80b4 	bgt.w	80053a8 <_VPrintTarget+0x330>
 8005240:	2b58      	cmp	r3, #88	; 0x58
 8005242:	f2c0 80b1 	blt.w	80053a8 <_VPrintTarget+0x330>
 8005246:	3b58      	subs	r3, #88	; 0x58
 8005248:	2b20      	cmp	r3, #32
 800524a:	f200 80ad 	bhi.w	80053a8 <_VPrintTarget+0x330>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <_VPrintTarget+0x1dc>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	0800534b 	.word	0x0800534b
 8005258:	080053a9 	.word	0x080053a9
 800525c:	080053a9 	.word	0x080053a9
 8005260:	080053a9 	.word	0x080053a9
 8005264:	080053a9 	.word	0x080053a9
 8005268:	080053a9 	.word	0x080053a9
 800526c:	080053a9 	.word	0x080053a9
 8005270:	080053a9 	.word	0x080053a9
 8005274:	080053a9 	.word	0x080053a9
 8005278:	080053a9 	.word	0x080053a9
 800527c:	080053a9 	.word	0x080053a9
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052ff 	.word	0x080052ff
 8005288:	080053a9 	.word	0x080053a9
 800528c:	080053a9 	.word	0x080053a9
 8005290:	080053a9 	.word	0x080053a9
 8005294:	080053a9 	.word	0x080053a9
 8005298:	080053a9 	.word	0x080053a9
 800529c:	080053a9 	.word	0x080053a9
 80052a0:	080053a9 	.word	0x080053a9
 80052a4:	080053a9 	.word	0x080053a9
 80052a8:	080053a9 	.word	0x080053a9
 80052ac:	080053a9 	.word	0x080053a9
 80052b0:	080053a9 	.word	0x080053a9
 80052b4:	08005375 	.word	0x08005375
 80052b8:	080053a9 	.word	0x080053a9
 80052bc:	080053a9 	.word	0x080053a9
 80052c0:	080053a9 	.word	0x080053a9
 80052c4:	080053a9 	.word	0x080053a9
 80052c8:	08005325 	.word	0x08005325
 80052cc:	080053a9 	.word	0x080053a9
 80052d0:	080053a9 	.word	0x080053a9
 80052d4:	0800534b 	.word	0x0800534b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1d19      	adds	r1, r3, #4
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80052e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80052ec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd1c 	bl	8004d34 <_StoreChar>
        break;
 80052fc:	e055      	b.n	80053aa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1d19      	adds	r1, r3, #4
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6011      	str	r1, [r2, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800530c:	f107 0014 	add.w	r0, r7, #20
 8005310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	220a      	movs	r2, #10
 800531c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800531e:	f7ff fe1b 	bl	8004f58 <_PrintInt>
        break;
 8005322:	e042      	b.n	80053aa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	1d19      	adds	r1, r3, #4
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6011      	str	r1, [r2, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005332:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005334:	f107 0014 	add.w	r0, r7, #20
 8005338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533a:	9301      	str	r3, [sp, #4]
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005342:	220a      	movs	r2, #10
 8005344:	f7ff fd72 	bl	8004e2c <_PrintUnsigned>
        break;
 8005348:	e02f      	b.n	80053aa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	1d19      	adds	r1, r3, #4
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6011      	str	r1, [r2, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005358:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800535a:	f107 0014 	add.w	r0, r7, #20
 800535e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	2210      	movs	r2, #16
 800536a:	f7ff fd5f 	bl	8004e2c <_PrintUnsigned>
        break;
 800536e:	e01c      	b.n	80053aa <_VPrintTarget+0x332>
 8005370:	2001425c 	.word	0x2001425c
      case 'p':
        v = va_arg(*pParamList, int);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005384:	f107 0014 	add.w	r0, r7, #20
 8005388:	2300      	movs	r3, #0
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	2308      	movs	r3, #8
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2308      	movs	r3, #8
 8005392:	2210      	movs	r2, #16
 8005394:	f7ff fd4a 	bl	8004e2c <_PrintUnsigned>
        break;
 8005398:	e007      	b.n	80053aa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	2125      	movs	r1, #37	; 0x25
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fcc7 	bl	8004d34 <_StoreChar>
        break;
 80053a6:	e000      	b.n	80053aa <_VPrintTarget+0x332>
      default:
        break;
 80053a8:	bf00      	nop
      }
      sFormat++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e007      	b.n	80053c2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80053b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fcb9 	bl	8004d34 <_StoreChar>
    }
  } while (*sFormat);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f47f ae72 	bne.w	80050b0 <_VPrintTarget+0x38>
 80053cc:	e000      	b.n	80053d0 <_VPrintTarget+0x358>
      break;
 80053ce:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d041      	beq.n	800545a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	643b      	str	r3, [r7, #64]	; 0x40
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e6:	e00b      	b.n	8005400 <_VPrintTarget+0x388>
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6439      	str	r1, [r7, #64]	; 0x40
 80053f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fc:	09db      	lsrs	r3, r3, #7
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	2b7f      	cmp	r3, #127	; 0x7f
 8005404:	d8f0      	bhi.n	80053e8 <_VPrintTarget+0x370>
 8005406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	643a      	str	r2, [r7, #64]	; 0x40
 800540c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005414:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	63bb      	str	r3, [r7, #56]	; 0x38
 800541a:	2300      	movs	r3, #0
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
 800541e:	e00b      	b.n	8005438 <_VPrintTarget+0x3c0>
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	b2da      	uxtb	r2, r3
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	1c59      	adds	r1, r3, #1
 8005428:	63b9      	str	r1, [r7, #56]	; 0x38
 800542a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	09db      	lsrs	r3, r3, #7
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	2b7f      	cmp	r3, #127	; 0x7f
 800543c:	d8f0      	bhi.n	8005420 <_VPrintTarget+0x3a8>
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	63ba      	str	r2, [r7, #56]	; 0x38
 8005444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	221a      	movs	r2, #26
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fb85 	bl	8004b64 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005460:	bf00      	nop
 8005462:	3758      	adds	r7, #88	; 0x58
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005476:	2300      	movs	r3, #0
 8005478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800547c:	4917      	ldr	r1, [pc, #92]	; (80054dc <SEGGER_SYSVIEW_Init+0x74>)
 800547e:	4818      	ldr	r0, [pc, #96]	; (80054e0 <SEGGER_SYSVIEW_Init+0x78>)
 8005480:	f7ff f95e 	bl	8004740 <SEGGER_RTT_AllocUpBuffer>
 8005484:	4603      	mov	r3, r0
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b16      	ldr	r3, [pc, #88]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800548a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800548c:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 800548e:	785a      	ldrb	r2, [r3, #1]
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005492:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005496:	7e1b      	ldrb	r3, [r3, #24]
 8005498:	4618      	mov	r0, r3
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2308      	movs	r3, #8
 80054a0:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <SEGGER_SYSVIEW_Init+0x80>)
 80054a2:	490f      	ldr	r1, [pc, #60]	; (80054e0 <SEGGER_SYSVIEW_Init+0x78>)
 80054a4:	f7ff f9d0 	bl	8004848 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80054a8:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <SEGGER_SYSVIEW_Init+0x84>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054b4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80054b6:	4a0b      	ldr	r2, [pc, #44]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80054c8:	4a06      	ldr	r2, [pc, #24]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20013224 	.word	0x20013224
 80054e0:	08006700 	.word	0x08006700
 80054e4:	2001422c 	.word	0x2001422c
 80054e8:	20014224 	.word	0x20014224
 80054ec:	e0001004 	.word	0xe0001004

080054f0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80054f8:	4a04      	ldr	r2, [pc, #16]	; (800550c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6113      	str	r3, [r2, #16]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	2001422c 	.word	0x2001422c

08005510 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005518:	f3ef 8311 	mrs	r3, BASEPRI
 800551c:	f04f 0120 	mov.w	r1, #32
 8005520:	f381 8811 	msr	BASEPRI, r1
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	4808      	ldr	r0, [pc, #32]	; (8005548 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005528:	f7ff fa2a 	bl	8004980 <_PreparePacket>
 800552c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68b8      	ldr	r0, [r7, #8]
 8005534:	f7ff fb16 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	2001425c 	.word	0x2001425c

0800554c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005556:	f3ef 8311 	mrs	r3, BASEPRI
 800555a:	f04f 0120 	mov.w	r1, #32
 800555e:	f381 8811 	msr	BASEPRI, r1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	4816      	ldr	r0, [pc, #88]	; (80055c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005566:	f7ff fa0b 	bl	8004980 <_PreparePacket>
 800556a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e00b      	b.n	8005592 <SEGGER_SYSVIEW_RecordU32+0x46>
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	61f9      	str	r1, [r7, #28]
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	6938      	ldr	r0, [r7, #16]
 80055ae:	f7ff fad9 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f383 8811 	msr	BASEPRI, r3
}
 80055b8:	bf00      	nop
 80055ba:	3720      	adds	r7, #32
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	2001425c 	.word	0x2001425c

080055c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	; 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055d0:	f3ef 8311 	mrs	r3, BASEPRI
 80055d4:	f04f 0120 	mov.w	r1, #32
 80055d8:	f381 8811 	msr	BASEPRI, r1
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	4825      	ldr	r0, [pc, #148]	; (8005674 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80055e0:	f7ff f9ce 	bl	8004980 <_PreparePacket>
 80055e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f2:	e00b      	b.n	800560c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b7f      	cmp	r3, #127	; 0x7f
 8005610:	d8f0      	bhi.n	80055f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	e00b      	b.n	8005644 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	6279      	str	r1, [r7, #36]	; 0x24
 8005636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	09db      	lsrs	r3, r3, #7
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b7f      	cmp	r3, #127	; 0x7f
 8005648:	d8f0      	bhi.n	800562c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	627a      	str	r2, [r7, #36]	; 0x24
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6979      	ldr	r1, [r7, #20]
 800565e:	69b8      	ldr	r0, [r7, #24]
 8005660:	f7ff fa80 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f383 8811 	msr	BASEPRI, r3
}
 800566a:	bf00      	nop
 800566c:	3730      	adds	r7, #48	; 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2001425c 	.word	0x2001425c

08005678 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b090      	sub	sp, #64	; 0x40
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005686:	f3ef 8311 	mrs	r3, BASEPRI
 800568a:	f04f 0120 	mov.w	r1, #32
 800568e:	f381 8811 	msr	BASEPRI, r1
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	4840      	ldr	r0, [pc, #256]	; (8005798 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005696:	f7ff f973 	bl	8004980 <_PreparePacket>
 800569a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056a8:	e00b      	b.n	80056c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b7f      	cmp	r3, #127	; 0x7f
 80056c6:	d8f0      	bhi.n	80056aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
 80056e0:	e00b      	b.n	80056fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	1c59      	adds	r1, r3, #1
 80056ea:	6379      	str	r1, [r7, #52]	; 0x34
 80056ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2b7f      	cmp	r3, #127	; 0x7f
 80056fe:	d8f0      	bhi.n	80056e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	637a      	str	r2, [r7, #52]	; 0x34
 8005706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
 8005718:	e00b      	b.n	8005732 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	09db      	lsrs	r3, r3, #7
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	2b7f      	cmp	r3, #127	; 0x7f
 8005736:	d8f0      	bhi.n	800571a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
 800574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	e00b      	b.n	800576a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	6279      	str	r1, [r7, #36]	; 0x24
 800575c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2b7f      	cmp	r3, #127	; 0x7f
 800576e:	d8f0      	bhi.n	8005752 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	627a      	str	r2, [r7, #36]	; 0x24
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	69b8      	ldr	r0, [r7, #24]
 8005786:	f7ff f9ed 	bl	8004b64 <_SendPacket>
  RECORD_END();
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f383 8811 	msr	BASEPRI, r3
}
 8005790:	bf00      	nop
 8005792:	3740      	adds	r7, #64	; 0x40
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	2001425c 	.word	0x2001425c

0800579c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b092      	sub	sp, #72	; 0x48
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80057aa:	f3ef 8311 	mrs	r3, BASEPRI
 80057ae:	f04f 0120 	mov.w	r1, #32
 80057b2:	f381 8811 	msr	BASEPRI, r1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	484e      	ldr	r0, [pc, #312]	; (80058f4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80057ba:	f7ff f8e1 	bl	8004980 <_PreparePacket>
 80057be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	643b      	str	r3, [r7, #64]	; 0x40
 80057cc:	e00b      	b.n	80057e6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80057ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d4:	1c59      	adds	r1, r3, #1
 80057d6:	6479      	str	r1, [r7, #68]	; 0x44
 80057d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e2:	09db      	lsrs	r3, r3, #7
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ea:	d8f0      	bhi.n	80057ce <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80057ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	647a      	str	r2, [r7, #68]	; 0x44
 80057f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	63bb      	str	r3, [r7, #56]	; 0x38
 8005804:	e00b      	b.n	800581e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	09db      	lsrs	r3, r3, #7
 800581c:	63bb      	str	r3, [r7, #56]	; 0x38
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b7f      	cmp	r3, #127	; 0x7f
 8005822:	d8f0      	bhi.n	8005806 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8005824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800582a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
 800583c:	e00b      	b.n	8005856 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	6379      	str	r1, [r7, #52]	; 0x34
 8005848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	633b      	str	r3, [r7, #48]	; 0x30
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	d8f0      	bhi.n	800583e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	637a      	str	r2, [r7, #52]	; 0x34
 8005862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
 8005874:	e00b      	b.n	800588e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	09db      	lsrs	r3, r3, #7
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2b7f      	cmp	r3, #127	; 0x7f
 8005892:	d8f0      	bhi.n	8005876 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800589a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
 80058a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	e00b      	b.n	80058c6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	6279      	str	r1, [r7, #36]	; 0x24
 80058b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	09db      	lsrs	r3, r3, #7
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d8f0      	bhi.n	80058ae <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	627a      	str	r2, [r7, #36]	; 0x24
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	69b8      	ldr	r0, [r7, #24]
 80058e2:	f7ff f93f 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f383 8811 	msr	BASEPRI, r3
}
 80058ec:	bf00      	nop
 80058ee:	3748      	adds	r7, #72	; 0x48
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	2001425c 	.word	0x2001425c

080058f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80058fe:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005904:	f3ef 8311 	mrs	r3, BASEPRI
 8005908:	f04f 0120 	mov.w	r1, #32
 800590c:	f381 8811 	msr	BASEPRI, r1
 8005910:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005912:	4b54      	ldr	r3, [pc, #336]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	220a      	movs	r2, #10
 8005918:	4953      	ldr	r1, [pc, #332]	; (8005a68 <SEGGER_SYSVIEW_Start+0x170>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fa fc58 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005926:	f7fe fbdf 	bl	80040e8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800592a:	200a      	movs	r0, #10
 800592c:	f7ff fdf0 	bl	8005510 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005930:	f3ef 8311 	mrs	r3, BASEPRI
 8005934:	f04f 0120 	mov.w	r1, #32
 8005938:	f381 8811 	msr	BASEPRI, r1
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	484b      	ldr	r0, [pc, #300]	; (8005a6c <SEGGER_SYSVIEW_Start+0x174>)
 8005940:	f7ff f81e 	bl	8004980 <_PreparePacket>
 8005944:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
 8005954:	e00b      	b.n	800596e <SEGGER_SYSVIEW_Start+0x76>
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	1c59      	adds	r1, r3, #1
 800595e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005960:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	09db      	lsrs	r3, r3, #7
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	2b7f      	cmp	r3, #127	; 0x7f
 8005972:	d8f0      	bhi.n	8005956 <SEGGER_SYSVIEW_Start+0x5e>
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800597a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	e00b      	b.n	80059a8 <SEGGER_SYSVIEW_Start+0xb0>
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	1c59      	adds	r1, r3, #1
 8005998:	6279      	str	r1, [r7, #36]	; 0x24
 800599a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	09db      	lsrs	r3, r3, #7
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b7f      	cmp	r3, #127	; 0x7f
 80059ac:	d8f0      	bhi.n	8005990 <SEGGER_SYSVIEW_Start+0x98>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	627a      	str	r2, [r7, #36]	; 0x24
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e00b      	b.n	80059e2 <SEGGER_SYSVIEW_Start+0xea>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	61f9      	str	r1, [r7, #28]
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <SEGGER_SYSVIEW_Start+0xd2>
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e00b      	b.n	8005a1a <SEGGER_SYSVIEW_Start+0x122>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1c59      	adds	r1, r3, #1
 8005a0a:	6179      	str	r1, [r7, #20]
 8005a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	09db      	lsrs	r3, r3, #7
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1e:	d8f0      	bhi.n	8005a02 <SEGGER_SYSVIEW_Start+0x10a>
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	617a      	str	r2, [r7, #20]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a30:	2218      	movs	r2, #24
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff f895 	bl	8004b64 <_SendPacket>
      RECORD_END();
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005a4e:	f000 f9eb 	bl	8005e28 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005a52:	f000 f9b1 	bl	8005db8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005a56:	f000 fc83 	bl	8006360 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005a5a:	bf00      	nop
 8005a5c:	3730      	adds	r7, #48	; 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	2001422c 	.word	0x2001422c
 8005a68:	0800672c 	.word	0x0800672c
 8005a6c:	2001425c 	.word	0x2001425c

08005a70 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a76:	f3ef 8311 	mrs	r3, BASEPRI
 8005a7a:	f04f 0120 	mov.w	r1, #32
 8005a7e:	f381 8811 	msr	BASEPRI, r1
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	480b      	ldr	r0, [pc, #44]	; (8005ab4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005a86:	f7fe ff7b 	bl	8004980 <_PreparePacket>
 8005a8a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005a94:	220b      	movs	r2, #11
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6838      	ldr	r0, [r7, #0]
 8005a9a:	f7ff f863 	bl	8004b64 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f383 8811 	msr	BASEPRI, r3
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2001425c 	.word	0x2001425c
 8005ab8:	2001422c 	.word	0x2001422c

08005abc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	; 0x30
 8005ac0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac6:	f04f 0120 	mov.w	r1, #32
 8005aca:	f381 8811 	msr	BASEPRI, r1
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	4845      	ldr	r0, [pc, #276]	; (8005be8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005ad2:	f7fe ff55 	bl	8004980 <_PreparePacket>
 8005ad6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae0:	4b42      	ldr	r3, [pc, #264]	; (8005bec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae6:	e00b      	b.n	8005b00 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	1c59      	adds	r1, r3, #1
 8005af0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	09db      	lsrs	r3, r3, #7
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	2b7f      	cmp	r3, #127	; 0x7f
 8005b04:	d8f0      	bhi.n	8005ae8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1a:	4b34      	ldr	r3, [pc, #208]	; (8005bec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	6279      	str	r1, [r7, #36]	; 0x24
 8005b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	627a      	str	r2, [r7, #36]	; 0x24
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e00b      	b.n	8005b74 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	61f9      	str	r1, [r7, #28]
 8005b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	09db      	lsrs	r3, r3, #7
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b7f      	cmp	r3, #127	; 0x7f
 8005b78:	d8f0      	bhi.n	8005b5c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	61fa      	str	r2, [r7, #28]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e00b      	b.n	8005bac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	6179      	str	r1, [r7, #20]
 8005b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	09db      	lsrs	r3, r3, #7
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb0:	d8f0      	bhi.n	8005b94 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	617a      	str	r2, [r7, #20]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bc2:	2218      	movs	r2, #24
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	68b8      	ldr	r0, [r7, #8]
 8005bc8:	f7fe ffcc 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	4798      	blx	r3
  }
}
 8005be0:	bf00      	nop
 8005be2:	3730      	adds	r7, #48	; 0x30
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	2001425c 	.word	0x2001425c
 8005bec:	2001422c 	.word	0x2001422c

08005bf0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b092      	sub	sp, #72	; 0x48
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfc:	f04f 0120 	mov.w	r1, #32
 8005c00:	f381 8811 	msr	BASEPRI, r1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	486a      	ldr	r0, [pc, #424]	; (8005db0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c08:	f7fe feba 	bl	8004980 <_PreparePacket>
 8005c0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b66      	ldr	r3, [pc, #408]	; (8005db4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	643b      	str	r3, [r7, #64]	; 0x40
 8005c22:	e00b      	b.n	8005c3c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	6479      	str	r1, [r7, #68]	; 0x44
 8005c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c40:	d8f0      	bhi.n	8005c24 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	647a      	str	r2, [r7, #68]	; 0x44
 8005c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5c:	e00b      	b.n	8005c76 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7fe fe23 	bl	80048e0 <_EncodeStr>
 8005c9a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005c9c:	2209      	movs	r2, #9
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6938      	ldr	r0, [r7, #16]
 8005ca2:	f7fe ff5f 	bl	8004b64 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cba:	e00b      	b.n	8005cd4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	6379      	str	r1, [r7, #52]	; 0x34
 8005cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	637a      	str	r2, [r7, #52]	; 0x34
 8005ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf4:	e00b      	b.n	8005d0e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	2b7f      	cmp	r3, #127	; 0x7f
 8005d12:	d8f0      	bhi.n	8005cf6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e00b      	b.n	8005d48 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	6279      	str	r1, [r7, #36]	; 0x24
 8005d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	623b      	str	r3, [r7, #32]
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d4c:	d8f0      	bhi.n	8005d30 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	627a      	str	r2, [r7, #36]	; 0x24
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e00b      	b.n	8005d80 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	61f9      	str	r1, [r7, #28]
 8005d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b7f      	cmp	r3, #127	; 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	61fa      	str	r2, [r7, #28]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005d96:	2215      	movs	r2, #21
 8005d98:	68f9      	ldr	r1, [r7, #12]
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f7fe fee2 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f383 8811 	msr	BASEPRI, r3
}
 8005da6:	bf00      	nop
 8005da8:	3748      	adds	r7, #72	; 0x48
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2001425c 	.word	0x2001425c
 8005db4:	2001422c 	.word	0x2001422c

08005db8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005dce:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4798      	blx	r3
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	2001422c 	.word	0x2001422c

08005de0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005de8:	f3ef 8311 	mrs	r3, BASEPRI
 8005dec:	f04f 0120 	mov.w	r1, #32
 8005df0:	f381 8811 	msr	BASEPRI, r1
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	480b      	ldr	r0, [pc, #44]	; (8005e24 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005df8:	f7fe fdc2 	bl	8004980 <_PreparePacket>
 8005dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dfe:	2280      	movs	r2, #128	; 0x80
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	6938      	ldr	r0, [r7, #16]
 8005e04:	f7fe fd6c 	bl	80048e0 <_EncodeStr>
 8005e08:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005e0a:	220e      	movs	r2, #14
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	6938      	ldr	r0, [r7, #16]
 8005e10:	f7fe fea8 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f383 8811 	msr	BASEPRI, r3
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2001425c 	.word	0x2001425c

08005e28 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005e2e:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01a      	beq.n	8005e6c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4798      	blx	r3
 8005e48:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e4c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	000a      	movs	r2, r1
 8005e5c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005e5e:	4613      	mov	r3, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	4621      	mov	r1, r4
 8005e64:	200d      	movs	r0, #13
 8005e66:	f7ff fbad 	bl	80055c4 <SEGGER_SYSVIEW_RecordU32x2>
 8005e6a:	e006      	b.n	8005e7a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4619      	mov	r1, r3
 8005e72:	200c      	movs	r0, #12
 8005e74:	f7ff fb6a 	bl	800554c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd90      	pop	{r4, r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2001422c 	.word	0x2001422c
 8005e88:	e0001004 	.word	0xe0001004

08005e8c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e92:	f3ef 8311 	mrs	r3, BASEPRI
 8005e96:	f04f 0120 	mov.w	r1, #32
 8005e9a:	f381 8811 	msr	BASEPRI, r1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	4819      	ldr	r0, [pc, #100]	; (8005f08 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005ea2:	f7fe fd6d 	bl	8004980 <_PreparePacket>
 8005ea6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005eac:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e00b      	b.n	8005ed8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	6179      	str	r1, [r7, #20]
 8005eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	09db      	lsrs	r3, r3, #7
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b7f      	cmp	r3, #127	; 0x7f
 8005edc:	d8f0      	bhi.n	8005ec0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	617a      	str	r2, [r7, #20]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005eee:	2202      	movs	r2, #2
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	68b8      	ldr	r0, [r7, #8]
 8005ef4:	f7fe fe36 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f383 8811 	msr	BASEPRI, r3
}
 8005efe:	bf00      	nop
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	2001425c 	.word	0x2001425c
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f16:	f3ef 8311 	mrs	r3, BASEPRI
 8005f1a:	f04f 0120 	mov.w	r1, #32
 8005f1e:	f381 8811 	msr	BASEPRI, r1
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	4807      	ldr	r0, [pc, #28]	; (8005f44 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f26:	f7fe fd2b 	bl	8004980 <_PreparePacket>
 8005f2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6838      	ldr	r0, [r7, #0]
 8005f32:	f7fe fe17 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f383 8811 	msr	BASEPRI, r3
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	2001425c 	.word	0x2001425c

08005f48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f52:	f04f 0120 	mov.w	r1, #32
 8005f56:	f381 8811 	msr	BASEPRI, r1
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	4807      	ldr	r0, [pc, #28]	; (8005f7c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005f5e:	f7fe fd0f 	bl	8004980 <_PreparePacket>
 8005f62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005f64:	2212      	movs	r2, #18
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6838      	ldr	r0, [r7, #0]
 8005f6a:	f7fe fdfb 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f383 8811 	msr	BASEPRI, r3
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	2001425c 	.word	0x2001425c

08005f80 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f86:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8a:	f04f 0120 	mov.w	r1, #32
 8005f8e:	f381 8811 	msr	BASEPRI, r1
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	4807      	ldr	r0, [pc, #28]	; (8005fb4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f96:	f7fe fcf3 	bl	8004980 <_PreparePacket>
 8005f9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005f9c:	2211      	movs	r2, #17
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f7fe fddf 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f383 8811 	msr	BASEPRI, r3
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	2001425c 	.word	0x2001425c

08005fb8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc4:	f04f 0120 	mov.w	r1, #32
 8005fc8:	f381 8811 	msr	BASEPRI, r1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	4819      	ldr	r0, [pc, #100]	; (8006034 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005fd0:	f7fe fcd6 	bl	8004980 <_PreparePacket>
 8005fd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fda:	4b17      	ldr	r3, [pc, #92]	; (8006038 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e00b      	b.n	8006006 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	61f9      	str	r1, [r7, #28]
 8005ff8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	09db      	lsrs	r3, r3, #7
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b7f      	cmp	r3, #127	; 0x7f
 800600a:	d8f0      	bhi.n	8005fee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	61fa      	str	r2, [r7, #28]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800601c:	2208      	movs	r2, #8
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f7fe fd9f 	bl	8004b64 <_SendPacket>
  RECORD_END();
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f383 8811 	msr	BASEPRI, r3
}
 800602c:	bf00      	nop
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	2001425c 	.word	0x2001425c
 8006038:	2001422c 	.word	0x2001422c

0800603c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006044:	f3ef 8311 	mrs	r3, BASEPRI
 8006048:	f04f 0120 	mov.w	r1, #32
 800604c:	f381 8811 	msr	BASEPRI, r1
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	4819      	ldr	r0, [pc, #100]	; (80060b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006054:	f7fe fc94 	bl	8004980 <_PreparePacket>
 8006058:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e00b      	b.n	800608a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	61f9      	str	r1, [r7, #28]
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	61fa      	str	r2, [r7, #28]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80060a0:	2204      	movs	r2, #4
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f7fe fd5d 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f383 8811 	msr	BASEPRI, r3
}
 80060b0:	bf00      	nop
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	2001425c 	.word	0x2001425c
 80060bc:	2001422c 	.word	0x2001422c

080060c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060c8:	f3ef 8311 	mrs	r3, BASEPRI
 80060cc:	f04f 0120 	mov.w	r1, #32
 80060d0:	f381 8811 	msr	BASEPRI, r1
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	4819      	ldr	r0, [pc, #100]	; (800613c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80060d8:	f7fe fc52 	bl	8004980 <_PreparePacket>
 80060dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	e00b      	b.n	800610e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	61f9      	str	r1, [r7, #28]
 8006100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	09db      	lsrs	r3, r3, #7
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b7f      	cmp	r3, #127	; 0x7f
 8006112:	d8f0      	bhi.n	80060f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	61fa      	str	r2, [r7, #28]
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006124:	2206      	movs	r2, #6
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	6938      	ldr	r0, [r7, #16]
 800612a:	f7fe fd1b 	bl	8004b64 <_SendPacket>
  RECORD_END();
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f383 8811 	msr	BASEPRI, r3
}
 8006134:	bf00      	nop
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2001425c 	.word	0x2001425c
 8006140:	2001422c 	.word	0x2001422c

08006144 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800614e:	f3ef 8311 	mrs	r3, BASEPRI
 8006152:	f04f 0120 	mov.w	r1, #32
 8006156:	f381 8811 	msr	BASEPRI, r1
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	4827      	ldr	r0, [pc, #156]	; (80061fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800615e:	f7fe fc0f 	bl	8004980 <_PreparePacket>
 8006162:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	e00b      	b.n	8006194 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1c59      	adds	r1, r3, #1
 8006184:	6279      	str	r1, [r7, #36]	; 0x24
 8006186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	623b      	str	r3, [r7, #32]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b7f      	cmp	r3, #127	; 0x7f
 8006198:	d8f0      	bhi.n	800617c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	627a      	str	r2, [r7, #36]	; 0x24
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	e00b      	b.n	80061cc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	61f9      	str	r1, [r7, #28]
 80061be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	2b7f      	cmp	r3, #127	; 0x7f
 80061d0:	d8f0      	bhi.n	80061b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	61fa      	str	r2, [r7, #28]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80061e2:	2207      	movs	r2, #7
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	6938      	ldr	r0, [r7, #16]
 80061e8:	f7fe fcbc 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f383 8811 	msr	BASEPRI, r3
}
 80061f2:	bf00      	nop
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2001425c 	.word	0x2001425c
 8006200:	2001422c 	.word	0x2001422c

08006204 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	1ad3      	subs	r3, r2, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	2001422c 	.word	0x2001422c

08006224 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800622e:	4b3b      	ldr	r3, [pc, #236]	; (800631c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d06d      	beq.n	8006312 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006236:	4b39      	ldr	r3, [pc, #228]	; (800631c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800623c:	2300      	movs	r3, #0
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006240:	e008      	b.n	8006254 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	3301      	adds	r3, #1
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006258:	429a      	cmp	r2, r3
 800625a:	d3f2      	bcc.n	8006242 <SEGGER_SYSVIEW_SendModule+0x1e>
 800625c:	e000      	b.n	8006260 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800625e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d055      	beq.n	8006312 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006266:	f3ef 8311 	mrs	r3, BASEPRI
 800626a:	f04f 0120 	mov.w	r1, #32
 800626e:	f381 8811 	msr	BASEPRI, r1
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	482a      	ldr	r0, [pc, #168]	; (8006320 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006276:	f7fe fb83 	bl	8004980 <_PreparePacket>
 800627a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	623b      	str	r3, [r7, #32]
 8006288:	e00b      	b.n	80062a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1c59      	adds	r1, r3, #1
 8006292:	6279      	str	r1, [r7, #36]	; 0x24
 8006294:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	09db      	lsrs	r3, r3, #7
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2b7f      	cmp	r3, #127	; 0x7f
 80062a6:	d8f0      	bhi.n	800628a <SEGGER_SYSVIEW_SendModule+0x66>
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	627a      	str	r2, [r7, #36]	; 0x24
 80062ae:	6a3a      	ldr	r2, [r7, #32]
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	e00b      	b.n	80062dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	61f9      	str	r1, [r7, #28]
 80062ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	09db      	lsrs	r3, r3, #7
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b7f      	cmp	r3, #127	; 0x7f
 80062e0:	d8f0      	bhi.n	80062c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	61fa      	str	r2, [r7, #28]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2280      	movs	r2, #128	; 0x80
 80062f8:	4619      	mov	r1, r3
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7fe faf0 	bl	80048e0 <_EncodeStr>
 8006300:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006302:	2216      	movs	r2, #22
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f7fe fc2c 	bl	8004b64 <_SendPacket>
      RECORD_END();
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3730      	adds	r7, #48	; 0x30
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20014254 	.word	0x20014254
 8006320:	2001425c 	.word	0x2001425c

08006324 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00f      	beq.n	8006352 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f2      	bne.n	8006338 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20014254 	.word	0x20014254

08006360 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006366:	f3ef 8311 	mrs	r3, BASEPRI
 800636a:	f04f 0120 	mov.w	r1, #32
 800636e:	f381 8811 	msr	BASEPRI, r1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	4817      	ldr	r0, [pc, #92]	; (80063d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006376:	f7fe fb03 	bl	8004980 <_PreparePacket>
 800637a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	e00b      	b.n	80063a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	6179      	str	r1, [r7, #20]
 8006396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b7f      	cmp	r3, #127	; 0x7f
 80063a8:	d8f0      	bhi.n	800638c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	617a      	str	r2, [r7, #20]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80063ba:	221b      	movs	r2, #27
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	68b8      	ldr	r0, [r7, #8]
 80063c0:	f7fe fbd0 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f383 8811 	msr	BASEPRI, r3
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2001425c 	.word	0x2001425c
 80063d8:	20014258 	.word	0x20014258

080063dc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80063dc:	b40f      	push	{r0, r1, r2, r3}
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	461a      	mov	r2, r3
 80063ee:	2100      	movs	r1, #0
 80063f0:	6938      	ldr	r0, [r7, #16]
 80063f2:	f7fe fe41 	bl	8005078 <_VPrintTarget>
  va_end(ParamList);
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006400:	b004      	add	sp, #16
 8006402:	4770      	bx	lr

08006404 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	; 0x28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800640c:	f3ef 8311 	mrs	r3, BASEPRI
 8006410:	f04f 0120 	mov.w	r1, #32
 8006414:	f381 8811 	msr	BASEPRI, r1
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	4827      	ldr	r0, [pc, #156]	; (80064b8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800641c:	f7fe fab0 	bl	8004980 <_PreparePacket>
 8006420:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006422:	2280      	movs	r2, #128	; 0x80
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	6938      	ldr	r0, [r7, #16]
 8006428:	f7fe fa5a 	bl	80048e0 <_EncodeStr>
 800642c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
 8006432:	2301      	movs	r3, #1
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	e00b      	b.n	8006450 <SEGGER_SYSVIEW_Warn+0x4c>
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	6279      	str	r1, [r7, #36]	; 0x24
 8006442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	09db      	lsrs	r3, r3, #7
 800644e:	623b      	str	r3, [r7, #32]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2b7f      	cmp	r3, #127	; 0x7f
 8006454:	d8f0      	bhi.n	8006438 <SEGGER_SYSVIEW_Warn+0x34>
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	627a      	str	r2, [r7, #36]	; 0x24
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e00b      	b.n	8006488 <SEGGER_SYSVIEW_Warn+0x84>
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	61f9      	str	r1, [r7, #28]
 800647a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	09db      	lsrs	r3, r3, #7
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b7f      	cmp	r3, #127	; 0x7f
 800648c:	d8f0      	bhi.n	8006470 <SEGGER_SYSVIEW_Warn+0x6c>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	61fa      	str	r2, [r7, #28]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800649e:	221a      	movs	r2, #26
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	f7fe fb5e 	bl	8004b64 <_SendPacket>
  RECORD_END();
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	2001425c 	.word	0x2001425c

080064bc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064c2:	7e1b      	ldrb	r3, [r3, #24]
 80064c4:	4619      	mov	r1, r3
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80064c8:	460b      	mov	r3, r1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	440b      	add	r3, r1
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	336c      	adds	r3, #108	; 0x6c
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064d8:	7e1b      	ldrb	r3, [r3, #24]
 80064da:	4618      	mov	r0, r3
 80064dc:	490d      	ldr	r1, [pc, #52]	; (8006514 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80064de:	4603      	mov	r3, r0
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4403      	add	r3, r0
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	440b      	add	r3, r1
 80064e8:	3370      	adds	r3, #112	; 0x70
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d00b      	beq.n	8006508 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064f2:	789b      	ldrb	r3, [r3, #2]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d107      	bne.n	8006508 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064fe:	f7fe fa4b 	bl	8004998 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006502:	4b03      	ldr	r3, [pc, #12]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006504:	2200      	movs	r2, #0
 8006506:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006508:	4b01      	ldr	r3, [pc, #4]	; (8006510 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800650a:	781b      	ldrb	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	bd80      	pop	{r7, pc}
 8006510:	2001422c 	.word	0x2001422c
 8006514:	20014394 	.word	0x20014394

08006518 <__libc_init_array>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	4d0d      	ldr	r5, [pc, #52]	; (8006550 <__libc_init_array+0x38>)
 800651c:	4c0d      	ldr	r4, [pc, #52]	; (8006554 <__libc_init_array+0x3c>)
 800651e:	1b64      	subs	r4, r4, r5
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	2600      	movs	r6, #0
 8006524:	42a6      	cmp	r6, r4
 8006526:	d109      	bne.n	800653c <__libc_init_array+0x24>
 8006528:	4d0b      	ldr	r5, [pc, #44]	; (8006558 <__libc_init_array+0x40>)
 800652a:	4c0c      	ldr	r4, [pc, #48]	; (800655c <__libc_init_array+0x44>)
 800652c:	f000 f83c 	bl	80065a8 <_init>
 8006530:	1b64      	subs	r4, r4, r5
 8006532:	10a4      	asrs	r4, r4, #2
 8006534:	2600      	movs	r6, #0
 8006536:	42a6      	cmp	r6, r4
 8006538:	d105      	bne.n	8006546 <__libc_init_array+0x2e>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006540:	4798      	blx	r3
 8006542:	3601      	adds	r6, #1
 8006544:	e7ee      	b.n	8006524 <__libc_init_array+0xc>
 8006546:	f855 3b04 	ldr.w	r3, [r5], #4
 800654a:	4798      	blx	r3
 800654c:	3601      	adds	r6, #1
 800654e:	e7f2      	b.n	8006536 <__libc_init_array+0x1e>
 8006550:	08006750 	.word	0x08006750
 8006554:	08006750 	.word	0x08006750
 8006558:	08006750 	.word	0x08006750
 800655c:	08006754 	.word	0x08006754

08006560 <memcmp>:
 8006560:	b530      	push	{r4, r5, lr}
 8006562:	3901      	subs	r1, #1
 8006564:	2400      	movs	r4, #0
 8006566:	42a2      	cmp	r2, r4
 8006568:	d101      	bne.n	800656e <memcmp+0xe>
 800656a:	2000      	movs	r0, #0
 800656c:	e005      	b.n	800657a <memcmp+0x1a>
 800656e:	5d03      	ldrb	r3, [r0, r4]
 8006570:	3401      	adds	r4, #1
 8006572:	5d0d      	ldrb	r5, [r1, r4]
 8006574:	42ab      	cmp	r3, r5
 8006576:	d0f6      	beq.n	8006566 <memcmp+0x6>
 8006578:	1b58      	subs	r0, r3, r5
 800657a:	bd30      	pop	{r4, r5, pc}

0800657c <memcpy>:
 800657c:	440a      	add	r2, r1
 800657e:	4291      	cmp	r1, r2
 8006580:	f100 33ff 	add.w	r3, r0, #4294967295
 8006584:	d100      	bne.n	8006588 <memcpy+0xc>
 8006586:	4770      	bx	lr
 8006588:	b510      	push	{r4, lr}
 800658a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006592:	4291      	cmp	r1, r2
 8006594:	d1f9      	bne.n	800658a <memcpy+0xe>
 8006596:	bd10      	pop	{r4, pc}

08006598 <memset>:
 8006598:	4402      	add	r2, r0
 800659a:	4603      	mov	r3, r0
 800659c:	4293      	cmp	r3, r2
 800659e:	d100      	bne.n	80065a2 <memset+0xa>
 80065a0:	4770      	bx	lr
 80065a2:	f803 1b01 	strb.w	r1, [r3], #1
 80065a6:	e7f9      	b.n	800659c <memset+0x4>

080065a8 <_init>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr

080065b4 <_fini>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr
